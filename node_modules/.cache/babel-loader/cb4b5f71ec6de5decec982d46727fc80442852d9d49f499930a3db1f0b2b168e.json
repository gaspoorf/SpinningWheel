{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Circle = void 0;\nconst sat_1 = require(\"sat\");\nconst model_1 = require(\"../model\");\nconst utils_1 = require(\"../utils\");\n/**\n * collider - circle\n */\nclass Circle extends sat_1.Circle {\n  /**\n   * collider - circle\n   */\n  constructor(position, radius, options) {\n    super((0, utils_1.ensureVectorPoint)(position), radius);\n    /**\n     * offset copy without angle applied\n     */\n    this.offsetCopy = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * was the polygon modified and needs update in the next checkCollision\n     */\n    this.dirty = false;\n    /*\n     * circles are convex\n     */\n    this.isConvex = true;\n    /**\n     * circle type\n     */\n    this.type = model_1.BodyType.Circle;\n    /**\n     * always centered\n     */\n    this.isCentered = true;\n    (0, utils_1.extendBody)(this, options);\n    this.unscaledRadius = radius;\n  }\n  /**\n   * get this.pos.x\n   */\n  get x() {\n    return this.pos.x;\n  }\n  /**\n   * updating this.pos.x by this.x = x updates AABB\n   */\n  set x(x) {\n    this.pos.x = x;\n    this.markAsDirty();\n  }\n  /**\n   * get this.pos.y\n   */\n  get y() {\n    return this.pos.y;\n  }\n  /**\n   * updating this.pos.y by this.y = y updates AABB\n   */\n  set y(y) {\n    this.pos.y = y;\n    this.markAsDirty();\n  }\n  /**\n   * allow get scale\n   */\n  get scale() {\n    return this.r / this.unscaledRadius;\n  }\n  /**\n   * shorthand for setScale()\n   */\n  set scale(scale) {\n    this.setScale(scale);\n  }\n  /**\n   * scaleX = scale in case of Circles\n   */\n  get scaleX() {\n    return this.scale;\n  }\n  /**\n   * scaleY = scale in case of Circles\n   */\n  get scaleY() {\n    return this.scale;\n  }\n  /**\n   * update position\n   */\n  setPosition(x, y, update = true) {\n    this.pos.x = x;\n    this.pos.y = y;\n    this.markAsDirty(update);\n    return this;\n  }\n  /**\n   * update scale\n   */\n  setScale(scaleX, _scaleY = scaleX, update = true) {\n    this.r = this.unscaledRadius * Math.abs(scaleX);\n    this.markAsDirty(update);\n    return this;\n  }\n  /**\n   * set rotation\n   */\n  setAngle(angle, update = true) {\n    this.angle = angle;\n    const {\n      x,\n      y\n    } = this.getOffsetWithAngle();\n    this.offset.x = x;\n    this.offset.y = y;\n    this.markAsDirty(update);\n    return this;\n  }\n  /**\n   * set offset from center\n   */\n  setOffset(offset, update = true) {\n    this.offsetCopy.x = offset.x;\n    this.offsetCopy.y = offset.y;\n    const {\n      x,\n      y\n    } = this.getOffsetWithAngle();\n    this.offset.x = x;\n    this.offset.y = y;\n    this.markAsDirty(update);\n    return this;\n  }\n  /**\n   * get body bounding box, without padding\n   */\n  getAABBAsBBox() {\n    const x = this.pos.x + this.offset.x;\n    const y = this.pos.y + this.offset.y;\n    return {\n      minX: x - this.r,\n      maxX: x + this.r,\n      minY: y - this.r,\n      maxY: y + this.r\n    };\n  }\n  /**\n   * Draws collider on a CanvasRenderingContext2D's current path\n   */\n  draw(context) {\n    const x = this.pos.x + this.offset.x;\n    const y = this.pos.y + this.offset.y;\n    const r = Math.abs(this.r);\n    if (this.isTrigger) {\n      const max = Math.max(8, this.r);\n      for (let i = 0; i < max; i++) {\n        const arc = i / max * 2 * Math.PI;\n        const arcPrev = (i - 1) / max * 2 * Math.PI;\n        const fromX = x + Math.cos(arcPrev) * this.r;\n        const fromY = y + Math.sin(arcPrev) * this.r;\n        const toX = x + Math.cos(arc) * this.r;\n        const toY = y + Math.sin(arc) * this.r;\n        (0, utils_1.dashLineTo)(context, fromX, fromY, toX, toY);\n      }\n    } else {\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, Math.PI * 2);\n    }\n  }\n  /**\n   * Draws Bounding Box on canvas context\n   */\n  drawBVH(context) {\n    (0, utils_1.drawBVH)(context, this);\n  }\n  /**\n   * inner function for after position change update aabb in system\n   */\n  updateBody(update = this.dirty) {\n    var _a;\n    if (update) {\n      (_a = this.system) === null || _a === void 0 ? void 0 : _a.insert(this);\n      this.dirty = false;\n    }\n  }\n  /**\n   * update instantly or mark as dirty\n   */\n  markAsDirty(update = false) {\n    if (update) {\n      this.updateBody(true);\n    } else {\n      this.dirty = true;\n    }\n  }\n  /**\n   * internal for getting offset with applied angle\n   */\n  getOffsetWithAngle() {\n    if (!this.offsetCopy.x && !this.offsetCopy.y || !this.angle) {\n      return this.offsetCopy;\n    }\n    const sin = Math.sin(this.angle);\n    const cos = Math.cos(this.angle);\n    const x = this.offsetCopy.x * cos - this.offsetCopy.y * sin;\n    const y = this.offsetCopy.x * sin + this.offsetCopy.y * cos;\n    return {\n      x,\n      y\n    };\n  }\n}\nexports.Circle = Circle;","map":{"version":3,"names":["Object","defineProperty","exports","value","Circle","sat_1","require","model_1","utils_1","constructor","position","radius","options","ensureVectorPoint","offsetCopy","x","y","dirty","isConvex","type","BodyType","isCentered","extendBody","unscaledRadius","pos","markAsDirty","scale","r","setScale","scaleX","scaleY","setPosition","update","_scaleY","Math","abs","setAngle","angle","getOffsetWithAngle","offset","setOffset","getAABBAsBBox","minX","maxX","minY","maxY","draw","context","isTrigger","max","i","arc","PI","arcPrev","fromX","cos","fromY","sin","toX","toY","dashLineTo","moveTo","drawBVH","updateBody","_a","system","insert"],"sources":["C:/Users/gaspa/OneDrive/Documents/MMI 2/S4/React/SpinningWheel/spin-wheel/node_modules/detect-collisions/dist/bodies/circle.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Circle = void 0;\nconst sat_1 = require(\"sat\");\nconst model_1 = require(\"../model\");\nconst utils_1 = require(\"../utils\");\n/**\n * collider - circle\n */\nclass Circle extends sat_1.Circle {\n    /**\n     * collider - circle\n     */\n    constructor(position, radius, options) {\n        super((0, utils_1.ensureVectorPoint)(position), radius);\n        /**\n         * offset copy without angle applied\n         */\n        this.offsetCopy = { x: 0, y: 0 };\n        /**\n         * was the polygon modified and needs update in the next checkCollision\n         */\n        this.dirty = false;\n        /*\n         * circles are convex\n         */\n        this.isConvex = true;\n        /**\n         * circle type\n         */\n        this.type = model_1.BodyType.Circle;\n        /**\n         * always centered\n         */\n        this.isCentered = true;\n        (0, utils_1.extendBody)(this, options);\n        this.unscaledRadius = radius;\n    }\n    /**\n     * get this.pos.x\n     */\n    get x() {\n        return this.pos.x;\n    }\n    /**\n     * updating this.pos.x by this.x = x updates AABB\n     */\n    set x(x) {\n        this.pos.x = x;\n        this.markAsDirty();\n    }\n    /**\n     * get this.pos.y\n     */\n    get y() {\n        return this.pos.y;\n    }\n    /**\n     * updating this.pos.y by this.y = y updates AABB\n     */\n    set y(y) {\n        this.pos.y = y;\n        this.markAsDirty();\n    }\n    /**\n     * allow get scale\n     */\n    get scale() {\n        return this.r / this.unscaledRadius;\n    }\n    /**\n     * shorthand for setScale()\n     */\n    set scale(scale) {\n        this.setScale(scale);\n    }\n    /**\n     * scaleX = scale in case of Circles\n     */\n    get scaleX() {\n        return this.scale;\n    }\n    /**\n     * scaleY = scale in case of Circles\n     */\n    get scaleY() {\n        return this.scale;\n    }\n    /**\n     * update position\n     */\n    setPosition(x, y, update = true) {\n        this.pos.x = x;\n        this.pos.y = y;\n        this.markAsDirty(update);\n        return this;\n    }\n    /**\n     * update scale\n     */\n    setScale(scaleX, _scaleY = scaleX, update = true) {\n        this.r = this.unscaledRadius * Math.abs(scaleX);\n        this.markAsDirty(update);\n        return this;\n    }\n    /**\n     * set rotation\n     */\n    setAngle(angle, update = true) {\n        this.angle = angle;\n        const { x, y } = this.getOffsetWithAngle();\n        this.offset.x = x;\n        this.offset.y = y;\n        this.markAsDirty(update);\n        return this;\n    }\n    /**\n     * set offset from center\n     */\n    setOffset(offset, update = true) {\n        this.offsetCopy.x = offset.x;\n        this.offsetCopy.y = offset.y;\n        const { x, y } = this.getOffsetWithAngle();\n        this.offset.x = x;\n        this.offset.y = y;\n        this.markAsDirty(update);\n        return this;\n    }\n    /**\n     * get body bounding box, without padding\n     */\n    getAABBAsBBox() {\n        const x = this.pos.x + this.offset.x;\n        const y = this.pos.y + this.offset.y;\n        return {\n            minX: x - this.r,\n            maxX: x + this.r,\n            minY: y - this.r,\n            maxY: y + this.r,\n        };\n    }\n    /**\n     * Draws collider on a CanvasRenderingContext2D's current path\n     */\n    draw(context) {\n        const x = this.pos.x + this.offset.x;\n        const y = this.pos.y + this.offset.y;\n        const r = Math.abs(this.r);\n        if (this.isTrigger) {\n            const max = Math.max(8, this.r);\n            for (let i = 0; i < max; i++) {\n                const arc = (i / max) * 2 * Math.PI;\n                const arcPrev = ((i - 1) / max) * 2 * Math.PI;\n                const fromX = x + Math.cos(arcPrev) * this.r;\n                const fromY = y + Math.sin(arcPrev) * this.r;\n                const toX = x + Math.cos(arc) * this.r;\n                const toY = y + Math.sin(arc) * this.r;\n                (0, utils_1.dashLineTo)(context, fromX, fromY, toX, toY);\n            }\n        }\n        else {\n            context.moveTo(x + r, y);\n            context.arc(x, y, r, 0, Math.PI * 2);\n        }\n    }\n    /**\n     * Draws Bounding Box on canvas context\n     */\n    drawBVH(context) {\n        (0, utils_1.drawBVH)(context, this);\n    }\n    /**\n     * inner function for after position change update aabb in system\n     */\n    updateBody(update = this.dirty) {\n        var _a;\n        if (update) {\n            (_a = this.system) === null || _a === void 0 ? void 0 : _a.insert(this);\n            this.dirty = false;\n        }\n    }\n    /**\n     * update instantly or mark as dirty\n     */\n    markAsDirty(update = false) {\n        if (update) {\n            this.updateBody(true);\n        }\n        else {\n            this.dirty = true;\n        }\n    }\n    /**\n     * internal for getting offset with applied angle\n     */\n    getOffsetWithAngle() {\n        if ((!this.offsetCopy.x && !this.offsetCopy.y) || !this.angle) {\n            return this.offsetCopy;\n        }\n        const sin = Math.sin(this.angle);\n        const cos = Math.cos(this.angle);\n        const x = this.offsetCopy.x * cos - this.offsetCopy.y * sin;\n        const y = this.offsetCopy.x * sin + this.offsetCopy.y * cos;\n        return { x, y };\n    }\n}\nexports.Circle = Circle;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}