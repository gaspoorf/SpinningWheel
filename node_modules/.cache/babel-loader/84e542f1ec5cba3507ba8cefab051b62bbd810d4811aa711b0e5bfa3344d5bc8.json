{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.map = exports.filter = exports.every = exports.some = exports.forEach = void 0;\n/**\n * 40-90% faster than built-in Array.forEach function.\n *\n * basic benchmark: https://jsbench.me/urle772xdn\n */\nconst forEach = (array, callback) => {\n  for (let i = 0, l = array.length; i < l; i++) {\n    callback(array[i], i);\n  }\n};\nexports.forEach = forEach;\n/**\n * 20-90% faster than built-in Array.some function.\n *\n * basic benchmark: https://jsbench.me/l0le7bnnsq\n */\nconst some = (array, callback) => {\n  for (let i = 0, l = array.length; i < l; i++) {\n    if (callback(array[i], i)) {\n      return true;\n    }\n  }\n  return false;\n};\nexports.some = some;\n/**\n * 20-40% faster than built-in Array.every function.\n *\n * basic benchmark: https://jsbench.me/unle7da29v\n */\nconst every = (array, callback) => {\n  for (let i = 0, l = array.length; i < l; i++) {\n    if (!callback(array[i], i)) {\n      return false;\n    }\n  }\n  return true;\n};\nexports.every = every;\n/**\n * 20-60% faster than built-in Array.filter function.\n *\n * basic benchmark: https://jsbench.me/o1le77ev4l\n */\nconst filter = (array, callback) => {\n  const output = [];\n  for (let i = 0, l = array.length; i < l; i++) {\n    const item = array[i];\n    if (callback(item, i)) {\n      output.push(item);\n    }\n  }\n  return output;\n};\nexports.filter = filter;\n/**\n * 20-70% faster than built-in Array.map\n *\n * basic benchmark: https://jsbench.me/oyle77vbpc\n */\nconst map = (array, callback) => {\n  const l = array.length;\n  const output = new Array(l);\n  for (let i = 0; i < l; i++) {\n    output[i] = callback(array[i], i);\n  }\n  return output;\n};\nexports.map = map;","map":{"version":3,"names":["Object","defineProperty","exports","value","map","filter","every","some","forEach","array","callback","i","l","length","output","item","push","Array"],"sources":["C:/Users/gaspa/OneDrive/Documents/MMI 2/S4/React/SpinningWheel/spin-wheel/node_modules/detect-collisions/dist/optimized.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.map = exports.filter = exports.every = exports.some = exports.forEach = void 0;\n/**\n * 40-90% faster than built-in Array.forEach function.\n *\n * basic benchmark: https://jsbench.me/urle772xdn\n */\nconst forEach = (array, callback) => {\n    for (let i = 0, l = array.length; i < l; i++) {\n        callback(array[i], i);\n    }\n};\nexports.forEach = forEach;\n/**\n * 20-90% faster than built-in Array.some function.\n *\n * basic benchmark: https://jsbench.me/l0le7bnnsq\n */\nconst some = (array, callback) => {\n    for (let i = 0, l = array.length; i < l; i++) {\n        if (callback(array[i], i)) {\n            return true;\n        }\n    }\n    return false;\n};\nexports.some = some;\n/**\n * 20-40% faster than built-in Array.every function.\n *\n * basic benchmark: https://jsbench.me/unle7da29v\n */\nconst every = (array, callback) => {\n    for (let i = 0, l = array.length; i < l; i++) {\n        if (!callback(array[i], i)) {\n            return false;\n        }\n    }\n    return true;\n};\nexports.every = every;\n/**\n * 20-60% faster than built-in Array.filter function.\n *\n * basic benchmark: https://jsbench.me/o1le77ev4l\n */\nconst filter = (array, callback) => {\n    const output = [];\n    for (let i = 0, l = array.length; i < l; i++) {\n        const item = array[i];\n        if (callback(item, i)) {\n            output.push(item);\n        }\n    }\n    return output;\n};\nexports.filter = filter;\n/**\n * 20-70% faster than built-in Array.map\n *\n * basic benchmark: https://jsbench.me/oyle77vbpc\n */\nconst map = (array, callback) => {\n    const l = array.length;\n    const output = new Array(l);\n    for (let i = 0; i < l; i++) {\n        output[i] = callback(array[i], i);\n    }\n    return output;\n};\nexports.map = map;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,GAAG,GAAGF,OAAO,CAACG,MAAM,GAAGH,OAAO,CAACI,KAAK,GAAGJ,OAAO,CAACK,IAAI,GAAGL,OAAO,CAACM,OAAO,GAAG,KAAK,CAAC;AACtF;AACA;AACA;AACA;AACA;AACA,MAAMA,OAAO,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IAC1CD,QAAQ,CAACD,KAAK,CAACE,CAAC,CAAC,EAAEA,CAAC,CAAC;EACzB;AACJ,CAAC;AACDT,OAAO,CAACM,OAAO,GAAGA,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA,MAAMD,IAAI,GAAGA,CAACE,KAAK,EAAEC,QAAQ,KAAK;EAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IAC1C,IAAID,QAAQ,CAACD,KAAK,CAACE,CAAC,CAAC,EAAEA,CAAC,CAAC,EAAE;MACvB,OAAO,IAAI;IACf;EACJ;EACA,OAAO,KAAK;AAChB,CAAC;AACDT,OAAO,CAACK,IAAI,GAAGA,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA,MAAMD,KAAK,GAAGA,CAACG,KAAK,EAAEC,QAAQ,KAAK;EAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IAC1C,IAAI,CAACD,QAAQ,CAACD,KAAK,CAACE,CAAC,CAAC,EAAEA,CAAC,CAAC,EAAE;MACxB,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf,CAAC;AACDT,OAAO,CAACI,KAAK,GAAGA,KAAK;AACrB;AACA;AACA;AACA;AACA;AACA,MAAMD,MAAM,GAAGA,CAACI,KAAK,EAAEC,QAAQ,KAAK;EAChC,MAAMI,MAAM,GAAG,EAAE;EACjB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IAC1C,MAAMI,IAAI,GAAGN,KAAK,CAACE,CAAC,CAAC;IACrB,IAAID,QAAQ,CAACK,IAAI,EAAEJ,CAAC,CAAC,EAAE;MACnBG,MAAM,CAACE,IAAI,CAACD,IAAI,CAAC;IACrB;EACJ;EACA,OAAOD,MAAM;AACjB,CAAC;AACDZ,OAAO,CAACG,MAAM,GAAGA,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA,MAAMD,GAAG,GAAGA,CAACK,KAAK,EAAEC,QAAQ,KAAK;EAC7B,MAAME,CAAC,GAAGH,KAAK,CAACI,MAAM;EACtB,MAAMC,MAAM,GAAG,IAAIG,KAAK,CAACL,CAAC,CAAC;EAC3B,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IACxBG,MAAM,CAACH,CAAC,CAAC,GAAGD,QAAQ,CAACD,KAAK,CAACE,CAAC,CAAC,EAAEA,CAAC,CAAC;EACrC;EACA,OAAOG,MAAM;AACjB,CAAC;AACDZ,OAAO,CAACE,GAAG,GAAGA,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}