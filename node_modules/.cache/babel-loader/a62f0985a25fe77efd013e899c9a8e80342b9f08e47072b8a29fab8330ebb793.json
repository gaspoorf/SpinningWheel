{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Ellipse = void 0;\nconst model_1 = require(\"../model\");\nconst utils_1 = require(\"../utils\");\nconst polygon_1 = require(\"./polygon\");\n/**\n * collider - ellipse\n */\nclass Ellipse extends polygon_1.Polygon {\n  /**\n   * collider - ellipse\n   */\n  constructor(position, radiusX, radiusY = radiusX, step = (radiusX + radiusY) / Math.PI, options) {\n    super(position, (0, utils_1.createEllipse)(radiusX, radiusY, step), options);\n    /**\n     * ellipse type\n     */\n    this.type = model_1.BodyType.Ellipse;\n    /**\n     * ellipses are convex\n     */\n    this.isConvex = true;\n    this._radiusX = radiusX;\n    this._radiusY = radiusY;\n    this._step = step;\n  }\n  /**\n   * flag to set is body centered\n   */\n  set isCentered(_isCentered) {}\n  /**\n   * is body centered?\n   */\n  get isCentered() {\n    return true;\n  }\n  /**\n   * get ellipse step number\n   */\n  get step() {\n    return this._step;\n  }\n  /**\n   * set ellipse step number\n   */\n  set step(step) {\n    this._step = step;\n    this.setPoints((0, utils_1.createEllipse)(this._radiusX, this._radiusY, this._step));\n  }\n  /**\n   * get ellipse radiusX\n   */\n  get radiusX() {\n    return this._radiusX;\n  }\n  /**\n   * set ellipse radiusX, update points\n   */\n  set radiusX(radiusX) {\n    this._radiusX = radiusX;\n    this.setPoints((0, utils_1.createEllipse)(this._radiusX, this._radiusY, this._step));\n  }\n  /**\n   * get ellipse radiusY\n   */\n  get radiusY() {\n    return this._radiusY;\n  }\n  /**\n   * set ellipse radiusY, update points\n   */\n  set radiusY(radiusY) {\n    this._radiusY = radiusY;\n    this.setPoints((0, utils_1.createEllipse)(this._radiusX, this._radiusY, this._step));\n  }\n  /**\n   * do not attempt to use Polygon.center()\n   */\n  center() {\n    return;\n  }\n  /**\n   * do not attempt to use Polygon.updateIsConvex()\n   */\n  updateIsConvex() {\n    return;\n  }\n}\nexports.Ellipse = Ellipse;","map":{"version":3,"names":["Object","defineProperty","exports","value","Ellipse","model_1","require","utils_1","polygon_1","Polygon","constructor","position","radiusX","radiusY","step","Math","PI","options","createEllipse","type","BodyType","isConvex","_radiusX","_radiusY","_step","isCentered","_isCentered","setPoints","center","updateIsConvex"],"sources":["C:/Users/gaspa/OneDrive/Documents/MMI 2/S4/React/SpinningWheel/spin-wheel/node_modules/detect-collisions/dist/bodies/ellipse.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Ellipse = void 0;\nconst model_1 = require(\"../model\");\nconst utils_1 = require(\"../utils\");\nconst polygon_1 = require(\"./polygon\");\n/**\n * collider - ellipse\n */\nclass Ellipse extends polygon_1.Polygon {\n    /**\n     * collider - ellipse\n     */\n    constructor(position, radiusX, radiusY = radiusX, step = (radiusX + radiusY) / Math.PI, options) {\n        super(position, (0, utils_1.createEllipse)(radiusX, radiusY, step), options);\n        /**\n         * ellipse type\n         */\n        this.type = model_1.BodyType.Ellipse;\n        /**\n         * ellipses are convex\n         */\n        this.isConvex = true;\n        this._radiusX = radiusX;\n        this._radiusY = radiusY;\n        this._step = step;\n    }\n    /**\n     * flag to set is body centered\n     */\n    set isCentered(_isCentered) { }\n    /**\n     * is body centered?\n     */\n    get isCentered() {\n        return true;\n    }\n    /**\n     * get ellipse step number\n     */\n    get step() {\n        return this._step;\n    }\n    /**\n     * set ellipse step number\n     */\n    set step(step) {\n        this._step = step;\n        this.setPoints((0, utils_1.createEllipse)(this._radiusX, this._radiusY, this._step));\n    }\n    /**\n     * get ellipse radiusX\n     */\n    get radiusX() {\n        return this._radiusX;\n    }\n    /**\n     * set ellipse radiusX, update points\n     */\n    set radiusX(radiusX) {\n        this._radiusX = radiusX;\n        this.setPoints((0, utils_1.createEllipse)(this._radiusX, this._radiusY, this._step));\n    }\n    /**\n     * get ellipse radiusY\n     */\n    get radiusY() {\n        return this._radiusY;\n    }\n    /**\n     * set ellipse radiusY, update points\n     */\n    set radiusY(radiusY) {\n        this._radiusY = radiusY;\n        this.setPoints((0, utils_1.createEllipse)(this._radiusX, this._radiusY, this._step));\n    }\n    /**\n     * do not attempt to use Polygon.center()\n     */\n    center() {\n        return;\n    }\n    /**\n     * do not attempt to use Polygon.updateIsConvex()\n     */\n    updateIsConvex() {\n        return;\n    }\n}\nexports.Ellipse = Ellipse;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAU,CAAC;AACnC,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAU,CAAC;AACnC,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAW,CAAC;AACtC;AACA;AACA;AACA,MAAMF,OAAO,SAASI,SAAS,CAACC,OAAO,CAAC;EACpC;AACJ;AACA;EACIC,WAAWA,CAACC,QAAQ,EAAEC,OAAO,EAAEC,OAAO,GAAGD,OAAO,EAAEE,IAAI,GAAG,CAACF,OAAO,GAAGC,OAAO,IAAIE,IAAI,CAACC,EAAE,EAAEC,OAAO,EAAE;IAC7F,KAAK,CAACN,QAAQ,EAAE,CAAC,CAAC,EAAEJ,OAAO,CAACW,aAAa,EAAEN,OAAO,EAAEC,OAAO,EAAEC,IAAI,CAAC,EAAEG,OAAO,CAAC;IAC5E;AACR;AACA;IACQ,IAAI,CAACE,IAAI,GAAGd,OAAO,CAACe,QAAQ,CAAChB,OAAO;IACpC;AACR;AACA;IACQ,IAAI,CAACiB,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,QAAQ,GAAGV,OAAO;IACvB,IAAI,CAACW,QAAQ,GAAGV,OAAO;IACvB,IAAI,CAACW,KAAK,GAAGV,IAAI;EACrB;EACA;AACJ;AACA;EACI,IAAIW,UAAUA,CAACC,WAAW,EAAE,CAAE;EAC9B;AACJ;AACA;EACI,IAAID,UAAUA,CAAA,EAAG;IACb,OAAO,IAAI;EACf;EACA;AACJ;AACA;EACI,IAAIX,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACU,KAAK;EACrB;EACA;AACJ;AACA;EACI,IAAIV,IAAIA,CAACA,IAAI,EAAE;IACX,IAAI,CAACU,KAAK,GAAGV,IAAI;IACjB,IAAI,CAACa,SAAS,CAAC,CAAC,CAAC,EAAEpB,OAAO,CAACW,aAAa,EAAE,IAAI,CAACI,QAAQ,EAAE,IAAI,CAACC,QAAQ,EAAE,IAAI,CAACC,KAAK,CAAC,CAAC;EACxF;EACA;AACJ;AACA;EACI,IAAIZ,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACU,QAAQ;EACxB;EACA;AACJ;AACA;EACI,IAAIV,OAAOA,CAACA,OAAO,EAAE;IACjB,IAAI,CAACU,QAAQ,GAAGV,OAAO;IACvB,IAAI,CAACe,SAAS,CAAC,CAAC,CAAC,EAAEpB,OAAO,CAACW,aAAa,EAAE,IAAI,CAACI,QAAQ,EAAE,IAAI,CAACC,QAAQ,EAAE,IAAI,CAACC,KAAK,CAAC,CAAC;EACxF;EACA;AACJ;AACA;EACI,IAAIX,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACU,QAAQ;EACxB;EACA;AACJ;AACA;EACI,IAAIV,OAAOA,CAACA,OAAO,EAAE;IACjB,IAAI,CAACU,QAAQ,GAAGV,OAAO;IACvB,IAAI,CAACc,SAAS,CAAC,CAAC,CAAC,EAAEpB,OAAO,CAACW,aAAa,EAAE,IAAI,CAACI,QAAQ,EAAE,IAAI,CAACC,QAAQ,EAAE,IAAI,CAACC,KAAK,CAAC,CAAC;EACxF;EACA;AACJ;AACA;EACII,MAAMA,CAAA,EAAG;IACL;EACJ;EACA;AACJ;AACA;EACIC,cAAcA,CAAA,EAAG;IACb;EACJ;AACJ;AACA3B,OAAO,CAACE,OAAO,GAAGA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}