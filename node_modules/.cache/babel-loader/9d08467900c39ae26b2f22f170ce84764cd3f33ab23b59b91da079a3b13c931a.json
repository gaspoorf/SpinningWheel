{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaspa\\\\OneDrive\\\\Documents\\\\MMI 2\\\\S4\\\\React\\\\SpinningWheel\\\\spin-wheel\\\\src\\\\components\\\\SpinWheel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport './css/wheel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst triangle = /*#__PURE__*/_jsxDEV(\"polygon\", {\n  points: \"50,5 55,-5 45,-5\",\n  fill: \"yellow\",\n  stroke: \"black\",\n  strokeWidth: \"1\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 3\n}, this);\nconst Wheel = () => {\n  _s();\n  const [fields, setFields] = useState([{\n    id: 1,\n    name: 'Section 1',\n    color: 'lightgreen'\n  }, {\n    id: 2,\n    name: 'Section 2',\n    color: 'lightblue'\n  }]);\n  const [result, setResult] = useState(null);\n  const [isSpinning, setIsSpinning] = useState(false);\n  const wheelRef = useRef(null);\n  const handleAddField = () => {\n    const newColor = fields.length % 2 === 0 ? 'lightgreen' : 'lightblue';\n    const newField = {\n      id: fields.length + 1,\n      name: `Section ${fields.length + 1}`,\n      color: newColor\n    };\n    setFields(prevFields => [...prevFields, newField]);\n  };\n  const handleRemoveField = () => {\n    if (fields.length > 1) {\n      setFields(prevFields => prevFields.slice(0, -1));\n    }\n  };\n  const handleFieldNameChange = (id, value) => {\n    setFields(prevFields => prevFields.map(field => field.id === id ? {\n      ...field,\n      name: value\n    } : field));\n  };\n  const handleStartSpin = () => {\n    setResult(null);\n    setIsSpinning(true);\n    const totalDuration = 3000;\n    const start = Date.now();\n    const spinAnimation = () => {\n      const elapsed = Date.now() - start;\n      const progress = Math.min(elapsed / totalDuration, 1);\n      const easedProgress = 0.5 - 0.5 * Math.cos(progress * Math.PI);\n      const rotation = 1080 * easedProgress;\n      wheelRef.current.style.transform = `rotate(${rotation}deg)`;\n      if (progress === 1) {\n        setIsSpinning(false);\n        detectSectionOnRotation();\n      }\n    };\n    const spinInterval = setInterval(spinAnimation, 16);\n    setTimeout(() => {\n      clearInterval(spinInterval);\n      setIsSpinning(false);\n      detectSectionOnRotation();\n    }, totalDuration + 100);\n  };\n  const detectSectionOnRotation = () => {\n    const totalFields = fields.length;\n    const angle = parseFloat(wheelRef.current.style.transform.replace(/[^0-9.-]+/g, '')) % 360;\n    const sectionAngle = 360 / totalFields;\n    const selectedSectionIndex = Math.floor(angle / sectionAngle);\n    setResult(selectedSectionIndex);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wheel-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Wheel Spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wheel\",\n      ref: wheelRef,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        viewBox: \"0 0 100 100\",\n        width: \"200\",\n        height: \"200\",\n        children: [fields.map((_, index) => /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M50 50 L50 0 A50 50 0 0 1 100 50 Z\",\n          fill: fields[index].color,\n          stroke: \"black\",\n          strokeWidth: \"1\",\n          transform: `rotate(${360 / fields.length * index} 50 50)`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"g\", {\n          transform: `translate(50, 5)`,\n          children: triangle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fields-container\",\n      children: fields.map(field => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: `Champ ${field.id}`,\n        value: field.name,\n        onChange: e => handleFieldNameChange(field.id, e.target.value)\n      }, field.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddField,\n      children: \"Ajouter un champ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRemoveField,\n      disabled: fields.length < 2,\n      children: \"Supprimer un champ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartSpin,\n      disabled: fields.length < 2 || isSpinning,\n      children: \"Lancer la roue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), result !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"R\\xE9sultat: \", fields[result].name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(Wheel, \"jun9UcYWWLN3UCuSHiOF3qh8Dnc=\");\n_c = Wheel;\nexport default Wheel;\nvar _c;\n$RefreshReg$(_c, \"Wheel\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","triangle","points","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","Wheel","_s","fields","setFields","id","name","color","result","setResult","isSpinning","setIsSpinning","wheelRef","handleAddField","newColor","length","newField","prevFields","handleRemoveField","slice","handleFieldNameChange","value","map","field","handleStartSpin","totalDuration","start","Date","now","spinAnimation","elapsed","progress","Math","min","easedProgress","cos","PI","rotation","current","style","transform","detectSectionOnRotation","spinInterval","setInterval","setTimeout","clearInterval","totalFields","angle","parseFloat","replace","sectionAngle","selectedSectionIndex","floor","className","children","ref","viewBox","width","height","_","index","d","type","placeholder","onChange","e","target","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/gaspa/OneDrive/Documents/MMI 2/S4/React/SpinningWheel/spin-wheel/src/components/SpinWheel.jsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './css/wheel.css';\r\n\r\nconst triangle = (\r\n  <polygon\r\n    points=\"50,5 55,-5 45,-5\"\r\n    fill=\"yellow\"\r\n    stroke=\"black\"\r\n    strokeWidth=\"1\"\r\n  />\r\n);\r\n\r\nconst Wheel = () => {\r\n  const [fields, setFields] = useState([\r\n    { id: 1, name: 'Section 1', color: 'lightgreen' },\r\n    { id: 2, name: 'Section 2', color: 'lightblue' },\r\n  ]);\r\n  const [result, setResult] = useState(null);\r\n  const [isSpinning, setIsSpinning] = useState(false);\r\n\r\n  const wheelRef = useRef(null);\r\n\r\n  const handleAddField = () => {\r\n    const newColor = fields.length % 2 === 0 ? 'lightgreen' : 'lightblue';\r\n    const newField = { id: fields.length + 1, name: `Section ${fields.length + 1}`, color: newColor };\r\n    setFields((prevFields) => [...prevFields, newField]);\r\n  };\r\n\r\n  const handleRemoveField = () => {\r\n    if (fields.length > 1) {\r\n      setFields((prevFields) => prevFields.slice(0, -1));\r\n    }\r\n  };\r\n\r\n  const handleFieldNameChange = (id, value) => {\r\n    setFields((prevFields) =>\r\n      prevFields.map((field) => (field.id === id ? { ...field, name: value } : field))\r\n    );\r\n  };\r\n\r\n  const handleStartSpin = () => {\r\n    setResult(null);\r\n    setIsSpinning(true);\r\n\r\n    const totalDuration = 3000;\r\n    const start = Date.now();\r\n\r\n    const spinAnimation = () => {\r\n      const elapsed = Date.now() - start;\r\n      const progress = Math.min(elapsed / totalDuration, 1);\r\n      const easedProgress = 0.5 - 0.5 * Math.cos(progress * Math.PI);\r\n\r\n      const rotation = 1080 * easedProgress;\r\n      wheelRef.current.style.transform = `rotate(${rotation}deg)`;\r\n\r\n      if (progress === 1) {\r\n        setIsSpinning(false);\r\n        detectSectionOnRotation();\r\n      }\r\n    };\r\n\r\n    const spinInterval = setInterval(spinAnimation, 16);\r\n\r\n    setTimeout(() => {\r\n      clearInterval(spinInterval);\r\n      setIsSpinning(false);\r\n      detectSectionOnRotation();\r\n    }, totalDuration + 100);\r\n  };\r\n\r\n  const detectSectionOnRotation = () => {\r\n    const totalFields = fields.length;\r\n    const angle = parseFloat(wheelRef.current.style.transform.replace(/[^0-9.-]+/g, '')) % 360;\r\n    const sectionAngle = 360 / totalFields;\r\n    const selectedSectionIndex = Math.floor(angle / sectionAngle);\r\n    setResult(selectedSectionIndex);\r\n  };\r\n\r\n  return (\r\n    <div className=\"wheel-container\">\r\n      <h2>Wheel Spinner</h2>\r\n      <div className=\"wheel\" ref={wheelRef}>\r\n        <svg viewBox=\"0 0 100 100\" width=\"200\" height=\"200\">\r\n          {fields.map((_, index) => (\r\n            <path\r\n              key={index}\r\n              d=\"M50 50 L50 0 A50 50 0 0 1 100 50 Z\"\r\n              fill={fields[index].color}\r\n              stroke=\"black\"\r\n              strokeWidth=\"1\"\r\n              transform={`rotate(${360 / fields.length * index} 50 50)`}\r\n            />\r\n          ))}\r\n          <g transform={`translate(50, 5)`}>\r\n            {triangle}\r\n          </g>\r\n        </svg>\r\n      </div>\r\n\r\n      <div className=\"fields-container\">\r\n        {fields.map((field) => (\r\n          <input\r\n            key={field.id}\r\n            type=\"text\"\r\n            placeholder={`Champ ${field.id}`}\r\n            value={field.name}\r\n            onChange={(e) => handleFieldNameChange(field.id, e.target.value)}\r\n          />\r\n        ))}\r\n      </div>\r\n      <button onClick={handleAddField}>Ajouter un champ</button>\r\n      <button onClick={handleRemoveField} disabled={fields.length < 2}>\r\n        Supprimer un champ\r\n      </button>\r\n      <button onClick={handleStartSpin} disabled={fields.length < 2 || isSpinning}>\r\n        Lancer la roue\r\n      </button>\r\n      {result !== null && <p>Résultat: {fields[result].name}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wheel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}