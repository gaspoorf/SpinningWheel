{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaspa\\\\OneDrive\\\\Documents\\\\MMI 2\\\\S4\\\\React\\\\SpinningWheel\\\\spin-wheel\\\\src\\\\components\\\\SpinWheel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './css/wheel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wheel = () => {\n  _s();\n  const [fields, setFields] = useState([{\n    id: 1,\n    name: '',\n    color: 'lightblue'\n  }]);\n  const [result, setResult] = useState(null);\n  const [wheelRotation, setWheelRotation] = useState('');\n  const handleAddField = () => {\n    const newColor = fields.length % 2 === 0 ? 'lightgreen' : 'lightblue';\n    const newField = {\n      id: fields.length + 1,\n      name: '',\n      color: newColor\n    };\n    setFields(prevFields => [...prevFields, newField]);\n  };\n  const handleRemoveField = () => {\n    if (fields.length > 1) {\n      setFields(prevFields => prevFields.slice(0, -1));\n    }\n  };\n  const handleFieldNameChange = (id, value) => {\n    setFields(prevFields => prevFields.map(field => field.id === id ? {\n      ...field,\n      name: value\n    } : field));\n  };\n  const handleStartSpin = () => {\n    const initialDelay = 100;\n    const totalDuration = 2000;\n    const refreshInterval = 16;\n    setResult(null);\n    let startTime = null;\n    const spinAnimation = () => {\n      const currentTime = Date.now();\n      const elapsedTime = currentTime - startTime;\n      if (elapsedTime < totalDuration) {\n        const rotation = calculateRotation(elapsedTime);\n        setWheelRotation(rotation);\n      } else {\n        clearInterval(animationInterval);\n        setResult(calculateResult());\n      }\n    };\n    const calculateResult = () => {\n      const totalFields = fields.length;\n      const randomResult = Math.floor(Math.random() * totalFields);\n      return randomResult;\n    };\n    startTime = Date.now();\n    setWheelRotation(calculateRotation(0)); // Initial rotation\n    const animationInterval = setInterval(spinAnimation, refreshInterval);\n    setTimeout(() => clearInterval(animationInterval), totalDuration + initialDelay);\n  };\n  const calculatePath = index => {\n    const totalFields = fields.length;\n    const angle = 360 / totalFields;\n    const startAngle = index * angle;\n    const endAngle = startAngle + angle;\n    const radius = 50;\n    const calculateRotation = elapsedTime => {\n      const easing = t => t * (2 - t);\n      const normalizedTime = elapsedTime / totalDuration;\n      const rotatedAngle = 1200 * easing(normalizedTime);\n      return `rotate(${rotatedAngle} 50 50)`;\n    };\n    const startX = 50 + radius * Math.cos(startAngle * Math.PI / 180);\n    const startY = 50 + radius * Math.sin(startAngle * Math.PI / 180);\n    const endX = 50 + radius * Math.cos(endAngle * Math.PI / 180);\n    const endY = 50 + radius * Math.sin(endAngle * Math.PI / 180);\n    const largeArcFlag = angle > 180 ? 1 : 0;\n    const color = index % 2 === 0 ? 'blue' : 'red';\n\n    //coordonÃ©es des textes\n    const textX = 50 + radius / 2 * Math.cos((startAngle + endAngle) / 2 * (Math.PI / 180));\n    const textY = 50 + radius / 2 * Math.sin((startAngle + endAngle) / 2 * (Math.PI / 180));\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: calculateRotation(index),\n      children: [/*#__PURE__*/_jsxDEV(\"path\", {\n        d: `M50 50 L${startX} ${startY} A${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY} Z`,\n        fill: color,\n        stroke: \"black\",\n        strokeWidth: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: textX,\n        y: textY,\n        fontSize: \"5\",\n        textAnchor: \"middle\",\n        fill: \"black\",\n        children: fields[index].name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"roulette-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Wheel Spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wheel\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        viewBox: \"0 0 100 100\",\n        width: \"200\",\n        height: \"200\",\n        children: /*#__PURE__*/_jsxDEV(\"g\", {\n          transform: wheelRotation,\n          children: fields.map((field, index) => calculatePath(index))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fields-container\",\n      children: fields.map(field => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: `Champ ${field.id}`,\n        value: field.name,\n        onChange: e => handleFieldNameChange(field.id, e.target.value)\n      }, field.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddField,\n      children: \"Ajouter un champ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRemoveField,\n      disabled: fields.length < 2,\n      children: \"Supprimer un champ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartSpin,\n      disabled: fields.length < 2,\n      children: \"Lancer la roue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), result !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"R\\xE9sultat: \", fields[result].name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(Wheel, \"Grz/6z//fOHaptNZOjrmnoFf8Pg=\");\n_c = Wheel;\nexport default Wheel;\nvar _c;\n$RefreshReg$(_c, \"Wheel\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Wheel","_s","fields","setFields","id","name","color","result","setResult","wheelRotation","setWheelRotation","handleAddField","newColor","length","newField","prevFields","handleRemoveField","slice","handleFieldNameChange","value","map","field","handleStartSpin","initialDelay","totalDuration","refreshInterval","startTime","spinAnimation","currentTime","Date","now","elapsedTime","rotation","calculateRotation","clearInterval","animationInterval","calculateResult","totalFields","randomResult","Math","floor","random","setInterval","setTimeout","calculatePath","index","angle","startAngle","endAngle","radius","easing","t","normalizedTime","rotatedAngle","startX","cos","PI","startY","sin","endX","endY","largeArcFlag","textX","textY","transform","children","d","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","x","y","fontSize","textAnchor","className","viewBox","width","height","type","placeholder","onChange","e","target","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/gaspa/OneDrive/Documents/MMI 2/S4/React/SpinningWheel/spin-wheel/src/components/SpinWheel.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './css/wheel.css';\r\n\r\nconst Wheel = () => {\r\n  const [fields, setFields] = useState([{ id: 1, name: '', color: 'lightblue' }]);\r\n  const [result, setResult] = useState(null);\r\n  const [wheelRotation, setWheelRotation] = useState('');\r\n\r\n  const handleAddField = () => {\r\n    const newColor = fields.length % 2 === 0 ? 'lightgreen' : 'lightblue';\r\n    const newField = { id: fields.length + 1, name: '', color: newColor };\r\n    setFields((prevFields) => [...prevFields, newField]);\r\n  };\r\n\r\n  const handleRemoveField = () => {\r\n    if (fields.length > 1) {\r\n      setFields((prevFields) => prevFields.slice(0, -1));\r\n    }\r\n  };\r\n\r\n  const handleFieldNameChange = (id, value) => {\r\n    setFields((prevFields) =>\r\n      prevFields.map((field) => (field.id === id ? { ...field, name: value } : field))\r\n    );\r\n  };\r\n\r\n  const handleStartSpin = () => {\r\n    const initialDelay = 100;\r\n    const totalDuration = 2000;\r\n    const refreshInterval = 16;\r\n    setResult(null);\r\n\r\n   \r\n\r\n    let startTime = null;\r\n\r\n    const spinAnimation = () => {\r\n      const currentTime = Date.now();\r\n      const elapsedTime = currentTime - startTime;\r\n\r\n      if (elapsedTime < totalDuration) {\r\n        const rotation = calculateRotation(elapsedTime);\r\n        setWheelRotation(rotation);\r\n      } else {\r\n        clearInterval(animationInterval);\r\n        setResult(calculateResult());\r\n      }\r\n    };\r\n\r\n    const calculateResult = () => {\r\n      const totalFields = fields.length;\r\n      const randomResult = Math.floor(Math.random() * totalFields);\r\n      return randomResult;\r\n    };\r\n\r\n    startTime = Date.now();\r\n    setWheelRotation(calculateRotation(0)); // Initial rotation\r\n    const animationInterval = setInterval(spinAnimation, refreshInterval);\r\n    setTimeout(() => clearInterval(animationInterval), totalDuration + initialDelay);\r\n  };\r\n\r\n  const calculatePath = (index) => {\r\n    const totalFields = fields.length;\r\n    const angle = (360 / totalFields);\r\n    const startAngle = index * angle;\r\n    const endAngle = startAngle + angle;\r\n    const radius = 50;\r\n\r\n    const calculateRotation = (elapsedTime) => {\r\n      const easing = (t) => t * (2 - t);\r\n      const normalizedTime = elapsedTime / totalDuration;\r\n      const rotatedAngle = 1200 * easing(normalizedTime);\r\n      return `rotate(${rotatedAngle} 50 50)`;\r\n    };\r\n\r\n    const startX = 50 + radius * Math.cos((startAngle * Math.PI) / 180);\r\n    const startY = 50 + radius * Math.sin((startAngle * Math.PI) / 180);\r\n    const endX = 50 + radius * Math.cos((endAngle * Math.PI) / 180);\r\n    const endY = 50 + radius * Math.sin((endAngle * Math.PI) / 180);\r\n\r\n    const largeArcFlag = angle > 180 ? 1 : 0;\r\n    const color = index % 2 === 0 ? 'blue' : 'red';\r\n\r\n    //coordonÃ©es des textes\r\n    const textX = 50 + (radius / 2) * Math.cos(((startAngle + endAngle) / 2) * (Math.PI / 180));\r\n    const textY = 50 + (radius / 2) * Math.sin(((startAngle + endAngle) / 2) * (Math.PI / 180));\r\n\r\n\r\n    return (\r\n      <g key={index} transform={calculateRotation(index)}>\r\n        <path\r\n          d={`M50 50 L${startX} ${startY} A${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY} Z`}\r\n          fill={color}\r\n          stroke=\"black\"\r\n          strokeWidth=\"1\"\r\n        />\r\n        <text x={textX} y={textY} fontSize=\"5\" textAnchor=\"middle\" fill=\"black\">\r\n          {fields[index].name}\r\n        </text>\r\n      </g>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"roulette-container\">\r\n      <h2>Wheel Spinner</h2>\r\n      <div className=\"wheel\">\r\n        <svg viewBox=\"0 0 100 100\" width=\"200\" height=\"200\">\r\n          <g transform={wheelRotation}>\r\n            {fields.map((field, index) => calculatePath(index))}\r\n\r\n           \r\n            \r\n          </g>\r\n        </svg>\r\n      </div>\r\n      <div className=\"fields-container\">\r\n        {fields.map((field) => (\r\n          <input\r\n            key={field.id}\r\n            type=\"text\"\r\n            placeholder={`Champ ${field.id}`}\r\n            value={field.name}\r\n            onChange={(e) => handleFieldNameChange(field.id, e.target.value)}\r\n          />\r\n        ))}\r\n      </div>\r\n      <button onClick={handleAddField}>Ajouter un champ</button>\r\n      <button onClick={handleRemoveField} disabled={fields.length < 2}>\r\n        Supprimer un champ\r\n      </button>\r\n      <button onClick={handleStartSpin} disabled={fields.length < 2}>\r\n        Lancer la roue\r\n      </button>\r\n      {result !== null && <p>RÃ©sultat: {fields[result].name}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wheel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}