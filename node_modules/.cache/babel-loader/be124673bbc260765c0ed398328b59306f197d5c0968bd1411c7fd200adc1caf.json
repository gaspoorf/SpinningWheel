{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaspa\\\\OneDrive\\\\Documents\\\\MMI 2\\\\S4\\\\React\\\\SpinningWheel\\\\spin-wheel\\\\src\\\\components\\\\SpinWheel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport './css/wheel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst triangle = /*#__PURE__*/_jsxDEV(\"polygon\", {\n  points: \"50,5 55,-5 45,-5\",\n  fill: \"yellow\",\n  stroke: \"black\",\n  strokeWidth: \"1\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 3\n}, this);\nconst Wheel = () => {\n  _s();\n  const [fields, setFields] = useState([{\n    id: 1,\n    name: 'Section 1',\n    color: 'lightgreen'\n  }, {\n    id: 2,\n    name: 'Section 2',\n    color: 'lightblue'\n  }]);\n  const [result, setResult] = useState(null);\n  const [rotation, setRotation] = useState(0);\n  const [isSpinning, setIsSpinning] = useState(false);\n  const wheelRef = useRef(null);\n  const triangleRef = useRef(null);\n  const handleAddField = () => {\n    const newColor = fields.length % 2 === 0 ? 'lightgreen' : 'lightblue';\n    const newField = {\n      id: fields.length + 1,\n      name: `Section ${fields.length + 1}`,\n      color: newColor\n    };\n    setFields(prevFields => [...prevFields, newField]);\n  };\n  const handleRemoveField = () => {\n    if (fields.length > 1) {\n      setFields(prevFields => prevFields.slice(0, -1));\n    }\n  };\n  const handleFieldNameChange = (id, value) => {\n    setFields(prevFields => prevFields.map(field => field.id === id ? {\n      ...field,\n      name: value\n    } : field));\n  };\n  const handleStartSpin = () => {\n    setResult(null);\n    setIsSpinning(true);\n\n    // Générer une position de départ aléatoire\n    const randomStartRotation = Math.floor(Math.random() * 360);\n    setRotation(randomStartRotation);\n    const totalDuration = 3000;\n    const start = Date.now();\n    const samples = 200;\n    const spinAnimation = () => {\n      const elapsed = Date.now() - start;\n      const progress = Math.min(elapsed / totalDuration, 1);\n      const easedProgress = 0.5 - 0.5 * Math.cos(progress * Math.PI);\n      const rotation = 720 * easedProgress + randomStartRotation;\n      setRotation(rotation % 360); // Assurez-vous que la rotation reste dans la plage [0, 360)\n    };\n    const spinInterval = setInterval(spinAnimation, 16);\n    setTimeout(() => {\n      clearInterval(spinInterval);\n      setIsSpinning(false);\n      const wheelRect = wheelRef.current.getBoundingClientRect();\n      const triangleRect = triangleRef.current.getBoundingClientRect();\n      const triangleCenterX = triangleRect.left + triangleRect.width / 2;\n      const triangleCenterY = triangleRect.top + triangleRect.height / 2;\n      const wheelCenterX = wheelRect.left + wheelRect.width / 2;\n      const wheelCenterY = wheelRect.top + wheelRect.height / 2;\n\n      // Calculer la nouvelle position du triangle après la rotation\n      const rotatedTriangleCenterX = triangleCenterX - wheelCenterX;\n      const rotatedTriangleCenterY = triangleCenterY - wheelCenterY;\n      const rotatedTrianglePosition = rotatePoint(rotatedTriangleCenterX, rotatedTriangleCenterY, rotation);\n      const newTriangleCenterX = rotatedTrianglePosition.x + wheelCenterX;\n      const newTriangleCenterY = rotatedTrianglePosition.y + wheelCenterY;\n\n      // Calculer l'angle de la nouvelle position du triangle par rapport au centre de la roue\n      const angle = Math.atan2(newTriangleCenterY - wheelCenterY, newTriangleCenterX - wheelCenterX) * (180 / Math.PI);\n      const normalizedAngle = (angle + 360) % 360;\n      const sectionAngle = 360 / fields.length;\n      const selectedSectionIndex = Math.floor(normalizedAngle / sectionAngle);\n      setResult(selectedSectionIndex !== null ? selectedSectionIndex : 0);\n    }, totalDuration + 100);\n  };\n  const calculatePath = index => {\n    const totalFields = fields.length;\n    const angle = 360 / totalFields * index;\n    const startAngle = angle;\n    const endAngle = angle + 360 / totalFields;\n    const radius = 50;\n    const startX = 50 + radius * Math.cos(startAngle * Math.PI / 180);\n    const startY = 50 + radius * Math.sin(startAngle * Math.PI / 180);\n    const endX = 50 + radius * Math.cos(endAngle * Math.PI / 180);\n    const endY = 50 + radius * Math.sin(endAngle * Math.PI / 180);\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n    const color = fields[index].color;\n    const textX = 50 + radius * 0.8 * Math.cos((startAngle + endAngle) / 2 * (Math.PI / 180));\n    const textY = 50 + radius * 0.8 * Math.sin((startAngle + endAngle) / 2 * (Math.PI / 180));\n    return {\n      path: /*#__PURE__*/_jsxDEV(\"path\", {\n        d: `M50 50 L${startX} ${startY} A${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY} Z`,\n        fill: color,\n        stroke: \"black\",\n        strokeWidth: \"1\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this),\n      text: /*#__PURE__*/_jsxDEV(\"text\", {\n        x: textX,\n        y: textY,\n        fontSize: \"5\",\n        textAnchor: \"middle\",\n        fill: \"black\",\n        children: fields[index].name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)\n    };\n  };\n\n  // Ajouter une fonction pour effectuer la rotation d'un point\n  function rotatePoint(x, y, angle) {\n    const radians = angle * Math.PI / 180;\n    const rotatedX = x * Math.cos(radians) - y * Math.sin(radians);\n    const rotatedY = x * Math.sin(radians) + y * Math.cos(radians);\n    return {\n      x: rotatedX,\n      y: rotatedY\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"roulette-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Wheel Spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wheel\",\n      ref: wheelRef,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        viewBox: \"0 0 100 100\",\n        width: \"200\",\n        height: \"200\",\n        children: [/*#__PURE__*/_jsxDEV(\"g\", {\n          transform: `rotate(${rotation} 50 50)`,\n          children: fields.map((_, index) => {\n            const {\n              path,\n              text\n            } = calculatePath(index);\n            const isHighlighted = !isSpinning && result !== null && index === result;\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              className: isHighlighted ? 'highlighted-section selected-indicator' : 'selected-indicator',\n              children: [path, text]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          ref: triangleRef,\n          children: triangle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fields-container\",\n      children: fields.map(field => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: `Champ ${field.id}`,\n        value: field.name,\n        onChange: e => handleFieldNameChange(field.id, e.target.value)\n      }, field.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddField,\n      children: \"Ajouter un champ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRemoveField,\n      disabled: fields.length < 2,\n      children: \"Supprimer un champ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartSpin,\n      disabled: fields.length < 2 || isSpinning,\n      children: \"Lancer la roue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), result !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"R\\xE9sultat: \", fields[result].name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(Wheel, \"nQOTKxztTPpSuzFktdSKMDO3vos=\");\n_c = Wheel;\nexport default Wheel;\nvar _c;\n$RefreshReg$(_c, \"Wheel\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","triangle","points","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","Wheel","_s","fields","setFields","id","name","color","result","setResult","rotation","setRotation","isSpinning","setIsSpinning","wheelRef","triangleRef","handleAddField","newColor","length","newField","prevFields","handleRemoveField","slice","handleFieldNameChange","value","map","field","handleStartSpin","randomStartRotation","Math","floor","random","totalDuration","start","Date","now","samples","spinAnimation","elapsed","progress","min","easedProgress","cos","PI","spinInterval","setInterval","setTimeout","clearInterval","wheelRect","current","getBoundingClientRect","triangleRect","triangleCenterX","left","width","triangleCenterY","top","height","wheelCenterX","wheelCenterY","rotatedTriangleCenterX","rotatedTriangleCenterY","rotatedTrianglePosition","rotatePoint","newTriangleCenterX","x","newTriangleCenterY","y","angle","atan2","normalizedAngle","sectionAngle","selectedSectionIndex","calculatePath","index","totalFields","startAngle","endAngle","radius","startX","startY","sin","endX","endY","largeArcFlag","textX","textY","path","d","text","fontSize","textAnchor","children","radians","rotatedX","rotatedY","className","ref","viewBox","transform","_","isHighlighted","type","placeholder","onChange","e","target","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/gaspa/OneDrive/Documents/MMI 2/S4/React/SpinningWheel/spin-wheel/src/components/SpinWheel.jsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './css/wheel.css';\r\n\r\nconst triangle = (\r\n  <polygon\r\n    points=\"50,5 55,-5 45,-5\"\r\n    fill=\"yellow\"\r\n    stroke=\"black\"\r\n    strokeWidth=\"1\"\r\n  />\r\n);\r\n\r\nconst Wheel = () => {\r\n  const [fields, setFields] = useState([\r\n    { id: 1, name: 'Section 1', color: 'lightgreen' },\r\n    { id: 2, name: 'Section 2', color: 'lightblue' },\r\n  ]);\r\n  const [result, setResult] = useState(null);\r\n  const [rotation, setRotation] = useState(0);\r\n  const [isSpinning, setIsSpinning] = useState(false);\r\n\r\n  const wheelRef = useRef(null);\r\n  const triangleRef = useRef(null);\r\n\r\n  const handleAddField = () => {\r\n    const newColor = fields.length % 2 === 0 ? 'lightgreen' : 'lightblue';\r\n    const newField = { id: fields.length + 1, name: `Section ${fields.length + 1}`, color: newColor };\r\n    setFields((prevFields) => [...prevFields, newField]);\r\n  };\r\n\r\n  const handleRemoveField = () => {\r\n    if (fields.length > 1) {\r\n      setFields((prevFields) => prevFields.slice(0, -1));\r\n    }\r\n  };\r\n\r\n  const handleFieldNameChange = (id, value) => {\r\n    setFields((prevFields) =>\r\n      prevFields.map((field) => (field.id === id ? { ...field, name: value } : field))\r\n    );\r\n  };\r\n\r\n  const handleStartSpin = () => {\r\n    setResult(null);\r\n    setIsSpinning(true);\r\n\r\n    // Générer une position de départ aléatoire\r\n    const randomStartRotation = Math.floor(Math.random() * 360);\r\n    setRotation(randomStartRotation);\r\n\r\n    const totalDuration = 3000;\r\n    const start = Date.now();\r\n    const samples = 200;\r\n\r\n    const spinAnimation = () => {\r\n      const elapsed = Date.now() - start;\r\n      const progress = Math.min(elapsed / totalDuration, 1);\r\n      const easedProgress = 0.5 - 0.5 * Math.cos(progress * Math.PI);\r\n\r\n      const rotation = 720 * easedProgress + randomStartRotation;\r\n      setRotation(rotation % 360); // Assurez-vous que la rotation reste dans la plage [0, 360)\r\n    };\r\n\r\n    const spinInterval = setInterval(spinAnimation, 16);\r\n\r\n    setTimeout(() => {\r\n      clearInterval(spinInterval);\r\n      setIsSpinning(false);\r\n\r\n      const wheelRect = wheelRef.current.getBoundingClientRect();\r\n      const triangleRect = triangleRef.current.getBoundingClientRect();\r\n\r\n      const triangleCenterX = triangleRect.left + triangleRect.width / 2;\r\n      const triangleCenterY = triangleRect.top + triangleRect.height / 2;\r\n\r\n      const wheelCenterX = wheelRect.left + wheelRect.width / 2;\r\n      const wheelCenterY = wheelRect.top + wheelRect.height / 2;\r\n\r\n      // Calculer la nouvelle position du triangle après la rotation\r\n      const rotatedTriangleCenterX = triangleCenterX - wheelCenterX;\r\n      const rotatedTriangleCenterY = triangleCenterY - wheelCenterY;\r\n\r\n      const rotatedTrianglePosition = rotatePoint(rotatedTriangleCenterX, rotatedTriangleCenterY, rotation);\r\n\r\n      const newTriangleCenterX = rotatedTrianglePosition.x + wheelCenterX;\r\n      const newTriangleCenterY = rotatedTrianglePosition.y + wheelCenterY;\r\n\r\n      // Calculer l'angle de la nouvelle position du triangle par rapport au centre de la roue\r\n      const angle = Math.atan2(newTriangleCenterY - wheelCenterY, newTriangleCenterX - wheelCenterX) * (180 / Math.PI);\r\n      const normalizedAngle = (angle + 360) % 360;\r\n\r\n      const sectionAngle = 360 / fields.length;\r\n      const selectedSectionIndex = Math.floor(normalizedAngle / sectionAngle);\r\n\r\n      setResult(selectedSectionIndex !== null ? selectedSectionIndex : 0);\r\n    }, totalDuration + 100);\r\n  };\r\n\r\n  const calculatePath = (index) => {\r\n    const totalFields = fields.length;\r\n    const angle = (360 / totalFields) * index;\r\n    const startAngle = angle;\r\n    const endAngle = angle + (360 / totalFields);\r\n\r\n    const radius = 50;\r\n\r\n    const startX = 50 + radius * Math.cos((startAngle * Math.PI) / 180);\r\n    const startY = 50 + radius * Math.sin((startAngle * Math.PI) / 180);\r\n    const endX = 50 + radius * Math.cos((endAngle * Math.PI) / 180);\r\n    const endY = 50 + radius * Math.sin((endAngle * Math.PI) / 180);\r\n\r\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\r\n    const color = fields[index].color;\r\n\r\n    const textX = 50 + radius * 0.8 * Math.cos(((startAngle + endAngle) / 2) * (Math.PI / 180));\r\n    const textY = 50 + radius * 0.8 * Math.sin(((startAngle + endAngle) / 2) * (Math.PI / 180));\r\n\r\n    return {\r\n      path: (\r\n        <path\r\n          key={index}\r\n          d={`M50 50 L${startX} ${startY} A${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY} Z`}\r\n          fill={color}\r\n          stroke=\"black\"\r\n          strokeWidth=\"1\"\r\n        />\r\n      ),\r\n      text: (\r\n        <text x={textX} y={textY} fontSize=\"5\" textAnchor=\"middle\" fill=\"black\">\r\n          {fields[index].name}\r\n        </text>\r\n      ),\r\n    };\r\n  };\r\n\r\n  // Ajouter une fonction pour effectuer la rotation d'un point\r\n  function rotatePoint(x, y, angle) {\r\n    const radians = (angle * Math.PI) / 180;\r\n    const rotatedX = x * Math.cos(radians) - y * Math.sin(radians);\r\n    const rotatedY = x * Math.sin(radians) + y * Math.cos(radians);\r\n    return { x: rotatedX, y: rotatedY };\r\n  }\r\n\r\n  return (\r\n    <div className=\"roulette-container\">\r\n      <h2>Wheel Spinner</h2>\r\n      <div className=\"wheel\" ref={wheelRef}>\r\n        <svg viewBox=\"0 0 100 100\" width=\"200\" height=\"200\">\r\n          <g transform={`rotate(${rotation} 50 50)`}>\r\n            {fields.map((_, index) => {\r\n              const { path, text } = calculatePath(index);\r\n              const isHighlighted = !isSpinning && result !== null && index === result;\r\n\r\n              return (\r\n                <g\r\n                  key={index}\r\n                  className={isHighlighted ? 'highlighted-section selected-indicator' : 'selected-indicator'}\r\n                >\r\n                  {path}\r\n                  {text}\r\n                </g>\r\n              );\r\n            })}\r\n          </g>\r\n          <g ref={triangleRef}>\r\n            {triangle}\r\n          </g>\r\n        </svg>\r\n      </div>\r\n\r\n      <div className=\"fields-container\">\r\n        {fields.map((field) => (\r\n          <input\r\n            key={field.id}\r\n            type=\"text\"\r\n            placeholder={`Champ ${field.id}`}\r\n            value={field.name}\r\n            onChange={(e) => handleFieldNameChange(field.id, e.target.value)}\r\n          />\r\n        ))}\r\n      </div>\r\n      <button onClick={handleAddField}>Ajouter un champ</button>\r\n      <button onClick={handleRemoveField} disabled={fields.length < 2}>\r\n        Supprimer un champ\r\n      </button>\r\n      <button onClick={handleStartSpin} disabled={fields.length < 2 || isSpinning}>\r\n        Lancer la roue\r\n      </button>\r\n      {result !== null && <p>Résultat: {fields[result].name}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wheel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}