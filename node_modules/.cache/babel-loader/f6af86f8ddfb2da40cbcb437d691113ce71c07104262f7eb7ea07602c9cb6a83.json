{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaspa\\\\OneDrive\\\\Documents\\\\MMI 2\\\\S4\\\\React\\\\Spin-Wheel\\\\spin-wheel\\\\src\\\\components\\\\SpinWheel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Wheel } from 'react-spin-wheel';\nimport './css/wheel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Roulette = () => {\n  _s();\n  const [segments, setSegments] = useState(['Better luck ', '10% off', '5% off']);\n  const [segColors, setSegColors] = useState(['black', '#60BA97', 'black']);\n  const [newSegment, setNewSegment] = useState('');\n  const [newSegColor, setNewSegColor] = useState('#000000');\n  const handleAddSegment = () => {\n    if (newSegment.trim() !== '') {\n      setSegments(prevSegments => [...prevSegments, newSegment]);\n      setSegColors(prevSegColors => [...prevSegColors, newSegColor]);\n      setNewSegment('');\n      setNewSegColor('#000000');\n    }\n  };\n  const handleSegmentChange = (index, value) => {\n    const updatedSegments = [...segments];\n    updatedSegments[index] = value;\n    setSegments(updatedSegments);\n  };\n  const onFinished = winner => {\n    console.log(winner);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"roulette-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Spinner wheel Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Wheel, {\n        segments: segments.map((segment, index) => ({\n          label: segment,\n          color: segColors[index]\n        })),\n        onSuccess: selectedSegment => console.log(`Selected: ${selectedSegment.label}`),\n        width: 300,\n        height: 300,\n        innerRadius: 50,\n        outerRadius: 150\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"segment-input\",\n      children: [segments.map((segment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: `Segment ${index + 1}`,\n          value: segment,\n          onChange: e => handleSegmentChange(index, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          value: segColors[index],\n          onChange: e => setSegColors(prevSegColors => {\n            const updatedColors = [...prevSegColors];\n            updatedColors[index] = e.target.value;\n            return updatedColors;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddSegment,\n        children: \"Ajouter un segment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(Roulette, \"O3+26IFYHeuz2kwCBikL5HtKmeg=\");\n_c = Roulette;\nexport default Roulette;\nvar _c;\n$RefreshReg$(_c, \"Roulette\");","map":{"version":3,"names":["React","useState","Wheel","jsxDEV","_jsxDEV","Roulette","_s","segments","setSegments","segColors","setSegColors","newSegment","setNewSegment","newSegColor","setNewSegColor","handleAddSegment","trim","prevSegments","prevSegColors","handleSegmentChange","index","value","updatedSegments","onFinished","winner","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","segment","label","color","onSuccess","selectedSegment","width","height","innerRadius","outerRadius","type","placeholder","onChange","e","target","updatedColors","onClick","_c","$RefreshReg$"],"sources":["C:/Users/gaspa/OneDrive/Documents/MMI 2/S4/React/Spin-Wheel/spin-wheel/src/components/SpinWheel.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Wheel } from 'react-spin-wheel';\r\nimport './css/wheel.css';\r\n\r\nconst Roulette = () => {\r\n  const [segments, setSegments] = useState(['Better luck ', '10% off', '5% off']);\r\n  const [segColors, setSegColors] = useState(['black', '#60BA97', 'black']);\r\n  const [newSegment, setNewSegment] = useState('');\r\n  const [newSegColor, setNewSegColor] = useState('#000000');\r\n\r\n  const handleAddSegment = () => {\r\n    if (newSegment.trim() !== '') {\r\n      setSegments(prevSegments => [...prevSegments, newSegment]);\r\n      setSegColors(prevSegColors => [...prevSegColors, newSegColor]);\r\n      setNewSegment('');\r\n      setNewSegColor('#000000');\r\n    }\r\n  };\r\n\r\n  const handleSegmentChange = (index, value) => {\r\n    const updatedSegments = [...segments];\r\n    updatedSegments[index] = value;\r\n    setSegments(updatedSegments);\r\n  };\r\n\r\n  const onFinished = winner => {\r\n    console.log(winner);\r\n  };\r\n\r\n  return (\r\n    <div className=\"roulette-container\">\r\n      <h1>Spinner wheel Demo</h1>\r\n      <div>\r\n        <Wheel\r\n          segments={segments.map((segment, index) => ({ label: segment, color: segColors[index] }))}\r\n          onSuccess={(selectedSegment) => console.log(`Selected: ${selectedSegment.label}`)}\r\n          width={300}\r\n          height={300}\r\n          innerRadius={50}\r\n          outerRadius={150}\r\n        />\r\n      </div>\r\n      <div className=\"segment-input\">\r\n        {segments.map((segment, index) => (\r\n          <div key={index}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder={`Segment ${index + 1}`}\r\n              value={segment}\r\n              onChange={(e) => handleSegmentChange(index, e.target.value)}\r\n            />\r\n            <input\r\n              type=\"color\"\r\n              value={segColors[index]}\r\n              onChange={(e) => setSegColors(prevSegColors => {\r\n                const updatedColors = [...prevSegColors];\r\n                updatedColors[index] = e.target.value;\r\n                return updatedColors;\r\n              })}\r\n            />\r\n          </div>\r\n        ))}\r\n        <button onClick={handleAddSegment}>Ajouter un segment</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Roulette;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}