{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseSystem = void 0;\nconst box_1 = require(\"./bodies/box\");\nconst circle_1 = require(\"./bodies/circle\");\nconst ellipse_1 = require(\"./bodies/ellipse\");\nconst line_1 = require(\"./bodies/line\");\nconst point_1 = require(\"./bodies/point\");\nconst polygon_1 = require(\"./bodies/polygon\");\nconst model_1 = require(\"./model\");\nconst optimized_1 = require(\"./optimized\");\nconst utils_1 = require(\"./utils\");\n/**\n * very base collision system (create, insert, update, draw, remove)\n */\nclass BaseSystem extends model_1.RBush {\n  /**\n   * create point at position with options and add to system\n   */\n  createPoint(position, options) {\n    const point = new point_1.Point(position, options);\n    this.insert(point);\n    return point;\n  }\n  /**\n   * create line at position with options and add to system\n   */\n  createLine(start, end, options) {\n    const line = new line_1.Line(start, end, options);\n    this.insert(line);\n    return line;\n  }\n  /**\n   * create circle at position with options and add to system\n   */\n  createCircle(position, radius, options) {\n    const circle = new circle_1.Circle(position, radius, options);\n    this.insert(circle);\n    return circle;\n  }\n  /**\n   * create box at position with options and add to system\n   */\n  createBox(position, width, height, options) {\n    const box = new box_1.Box(position, width, height, options);\n    this.insert(box);\n    return box;\n  }\n  /**\n   * create ellipse at position with options and add to system\n   */\n  createEllipse(position, radiusX, radiusY = radiusX, step, options) {\n    const ellipse = new ellipse_1.Ellipse(position, radiusX, radiusY, step, options);\n    this.insert(ellipse);\n    return ellipse;\n  }\n  /**\n   * create polygon at position with options and add to system\n   */\n  createPolygon(position, points, options) {\n    const polygon = new polygon_1.Polygon(position, points, options);\n    this.insert(polygon);\n    return polygon;\n  }\n  /**\n   * re-insert body into collision tree and update its aabb\n   * every body can be part of only one system\n   */\n  insert(body) {\n    body.bbox = body.getAABBAsBBox();\n    if (body.system) {\n      // allow end if body inserted and not moved\n      if (!(0, utils_1.bodyMoved)(body)) {\n        return this;\n      }\n      // old bounding box *needs* to be removed\n      body.system.remove(body);\n    }\n    // only then we update min, max\n    body.minX = body.bbox.minX - body.padding;\n    body.minY = body.bbox.minY - body.padding;\n    body.maxX = body.bbox.maxX + body.padding;\n    body.maxY = body.bbox.maxY + body.padding;\n    // set system for later body.system.updateBody(body)\n    body.system = this;\n    // reinsert bounding box to collision tree\n    return super.insert(body);\n  }\n  /**\n   * updates body in collision tree\n   */\n  updateBody(body) {\n    body.updateBody();\n  }\n  /**\n   * update all bodies aabb\n   */\n  update() {\n    (0, optimized_1.forEach)(this.all(), body => {\n      this.updateBody(body);\n    });\n  }\n  /**\n   * draw exact bodies colliders outline\n   */\n  draw(context) {\n    (0, optimized_1.forEach)(this.all(), body => {\n      body.draw(context);\n    });\n  }\n  /**\n   * draw bounding boxes hierarchy outline\n   */\n  drawBVH(context) {\n    const drawChildren = body => {\n      (0, utils_1.drawBVH)(context, body);\n      if (body.children) {\n        (0, optimized_1.forEach)(body.children, drawChildren);\n      }\n    };\n    (0, optimized_1.forEach)(this.data.children, drawChildren);\n  }\n  /**\n   * remove body aabb from collision tree\n   */\n  remove(body, equals) {\n    body.system = undefined;\n    return super.remove(body, equals);\n  }\n  /**\n   * get object potential colliders\n   * @deprecated because it's slower to use than checkOne() or checkAll()\n   */\n  getPotentials(body) {\n    // filter here is required as collides with self\n    return (0, optimized_1.filter)(this.search(body), candidate => candidate !== body);\n  }\n  /**\n   * used to find body deep inside data with finder function returning boolean found or not\n   */\n  traverse(traverseFunction, {\n    children\n  } = this.data) {\n    return children === null || children === void 0 ? void 0 : children.find((body, index) => {\n      if (!body) {\n        return false;\n      }\n      if (body.type && traverseFunction(body, children, index)) {\n        return true;\n      }\n      // if callback returns true, ends forEach\n      if (body.children) {\n        this.traverse(traverseFunction, body);\n      }\n    });\n  }\n}\nexports.BaseSystem = BaseSystem;","map":{"version":3,"names":["Object","defineProperty","exports","value","BaseSystem","box_1","require","circle_1","ellipse_1","line_1","point_1","polygon_1","model_1","optimized_1","utils_1","RBush","createPoint","position","options","point","Point","insert","createLine","start","end","line","Line","createCircle","radius","circle","Circle","createBox","width","height","box","Box","createEllipse","radiusX","radiusY","step","ellipse","Ellipse","createPolygon","points","polygon","Polygon","body","bbox","getAABBAsBBox","system","bodyMoved","remove","minX","padding","minY","maxX","maxY","updateBody","update","forEach","all","draw","context","drawBVH","drawChildren","children","data","equals","undefined","getPotentials","filter","search","candidate","traverse","traverseFunction","find","index","type"],"sources":["C:/Users/gaspa/OneDrive/Documents/MMI 2/S4/React/SpinningWheel/spin-wheel/node_modules/detect-collisions/dist/base-system.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseSystem = void 0;\nconst box_1 = require(\"./bodies/box\");\nconst circle_1 = require(\"./bodies/circle\");\nconst ellipse_1 = require(\"./bodies/ellipse\");\nconst line_1 = require(\"./bodies/line\");\nconst point_1 = require(\"./bodies/point\");\nconst polygon_1 = require(\"./bodies/polygon\");\nconst model_1 = require(\"./model\");\nconst optimized_1 = require(\"./optimized\");\nconst utils_1 = require(\"./utils\");\n/**\n * very base collision system (create, insert, update, draw, remove)\n */\nclass BaseSystem extends model_1.RBush {\n    /**\n     * create point at position with options and add to system\n     */\n    createPoint(position, options) {\n        const point = new point_1.Point(position, options);\n        this.insert(point);\n        return point;\n    }\n    /**\n     * create line at position with options and add to system\n     */\n    createLine(start, end, options) {\n        const line = new line_1.Line(start, end, options);\n        this.insert(line);\n        return line;\n    }\n    /**\n     * create circle at position with options and add to system\n     */\n    createCircle(position, radius, options) {\n        const circle = new circle_1.Circle(position, radius, options);\n        this.insert(circle);\n        return circle;\n    }\n    /**\n     * create box at position with options and add to system\n     */\n    createBox(position, width, height, options) {\n        const box = new box_1.Box(position, width, height, options);\n        this.insert(box);\n        return box;\n    }\n    /**\n     * create ellipse at position with options and add to system\n     */\n    createEllipse(position, radiusX, radiusY = radiusX, step, options) {\n        const ellipse = new ellipse_1.Ellipse(position, radiusX, radiusY, step, options);\n        this.insert(ellipse);\n        return ellipse;\n    }\n    /**\n     * create polygon at position with options and add to system\n     */\n    createPolygon(position, points, options) {\n        const polygon = new polygon_1.Polygon(position, points, options);\n        this.insert(polygon);\n        return polygon;\n    }\n    /**\n     * re-insert body into collision tree and update its aabb\n     * every body can be part of only one system\n     */\n    insert(body) {\n        body.bbox = body.getAABBAsBBox();\n        if (body.system) {\n            // allow end if body inserted and not moved\n            if (!(0, utils_1.bodyMoved)(body)) {\n                return this;\n            }\n            // old bounding box *needs* to be removed\n            body.system.remove(body);\n        }\n        // only then we update min, max\n        body.minX = body.bbox.minX - body.padding;\n        body.minY = body.bbox.minY - body.padding;\n        body.maxX = body.bbox.maxX + body.padding;\n        body.maxY = body.bbox.maxY + body.padding;\n        // set system for later body.system.updateBody(body)\n        body.system = this;\n        // reinsert bounding box to collision tree\n        return super.insert(body);\n    }\n    /**\n     * updates body in collision tree\n     */\n    updateBody(body) {\n        body.updateBody();\n    }\n    /**\n     * update all bodies aabb\n     */\n    update() {\n        (0, optimized_1.forEach)(this.all(), (body) => {\n            this.updateBody(body);\n        });\n    }\n    /**\n     * draw exact bodies colliders outline\n     */\n    draw(context) {\n        (0, optimized_1.forEach)(this.all(), (body) => {\n            body.draw(context);\n        });\n    }\n    /**\n     * draw bounding boxes hierarchy outline\n     */\n    drawBVH(context) {\n        const drawChildren = (body) => {\n            (0, utils_1.drawBVH)(context, body);\n            if (body.children) {\n                (0, optimized_1.forEach)(body.children, drawChildren);\n            }\n        };\n        (0, optimized_1.forEach)(this.data.children, drawChildren);\n    }\n    /**\n     * remove body aabb from collision tree\n     */\n    remove(body, equals) {\n        body.system = undefined;\n        return super.remove(body, equals);\n    }\n    /**\n     * get object potential colliders\n     * @deprecated because it's slower to use than checkOne() or checkAll()\n     */\n    getPotentials(body) {\n        // filter here is required as collides with self\n        return (0, optimized_1.filter)(this.search(body), (candidate) => candidate !== body);\n    }\n    /**\n     * used to find body deep inside data with finder function returning boolean found or not\n     */\n    traverse(traverseFunction, { children } = this.data) {\n        return children === null || children === void 0 ? void 0 : children.find((body, index) => {\n            if (!body) {\n                return false;\n            }\n            if (body.type && traverseFunction(body, children, index)) {\n                return true;\n            }\n            // if callback returns true, ends forEach\n            if (body.children) {\n                this.traverse(traverseFunction, body);\n            }\n        });\n    }\n}\nexports.BaseSystem = BaseSystem;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAC3B,MAAMC,KAAK,GAAGC,OAAO,CAAC,cAAc,CAAC;AACrC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAC3C,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMG,MAAM,GAAGH,OAAO,CAAC,eAAe,CAAC;AACvC,MAAMI,OAAO,GAAGJ,OAAO,CAAC,gBAAgB,CAAC;AACzC,MAAMK,SAAS,GAAGL,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMM,OAAO,GAAGN,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMO,WAAW,GAAGP,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAMQ,OAAO,GAAGR,OAAO,CAAC,SAAS,CAAC;AAClC;AACA;AACA;AACA,MAAMF,UAAU,SAASQ,OAAO,CAACG,KAAK,CAAC;EACnC;AACJ;AACA;EACIC,WAAWA,CAACC,QAAQ,EAAEC,OAAO,EAAE;IAC3B,MAAMC,KAAK,GAAG,IAAIT,OAAO,CAACU,KAAK,CAACH,QAAQ,EAAEC,OAAO,CAAC;IAClD,IAAI,CAACG,MAAM,CAACF,KAAK,CAAC;IAClB,OAAOA,KAAK;EAChB;EACA;AACJ;AACA;EACIG,UAAUA,CAACC,KAAK,EAAEC,GAAG,EAAEN,OAAO,EAAE;IAC5B,MAAMO,IAAI,GAAG,IAAIhB,MAAM,CAACiB,IAAI,CAACH,KAAK,EAAEC,GAAG,EAAEN,OAAO,CAAC;IACjD,IAAI,CAACG,MAAM,CAACI,IAAI,CAAC;IACjB,OAAOA,IAAI;EACf;EACA;AACJ;AACA;EACIE,YAAYA,CAACV,QAAQ,EAAEW,MAAM,EAAEV,OAAO,EAAE;IACpC,MAAMW,MAAM,GAAG,IAAItB,QAAQ,CAACuB,MAAM,CAACb,QAAQ,EAAEW,MAAM,EAAEV,OAAO,CAAC;IAC7D,IAAI,CAACG,MAAM,CAACQ,MAAM,CAAC;IACnB,OAAOA,MAAM;EACjB;EACA;AACJ;AACA;EACIE,SAASA,CAACd,QAAQ,EAAEe,KAAK,EAAEC,MAAM,EAAEf,OAAO,EAAE;IACxC,MAAMgB,GAAG,GAAG,IAAI7B,KAAK,CAAC8B,GAAG,CAAClB,QAAQ,EAAEe,KAAK,EAAEC,MAAM,EAAEf,OAAO,CAAC;IAC3D,IAAI,CAACG,MAAM,CAACa,GAAG,CAAC;IAChB,OAAOA,GAAG;EACd;EACA;AACJ;AACA;EACIE,aAAaA,CAACnB,QAAQ,EAAEoB,OAAO,EAAEC,OAAO,GAAGD,OAAO,EAAEE,IAAI,EAAErB,OAAO,EAAE;IAC/D,MAAMsB,OAAO,GAAG,IAAIhC,SAAS,CAACiC,OAAO,CAACxB,QAAQ,EAAEoB,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAErB,OAAO,CAAC;IAChF,IAAI,CAACG,MAAM,CAACmB,OAAO,CAAC;IACpB,OAAOA,OAAO;EAClB;EACA;AACJ;AACA;EACIE,aAAaA,CAACzB,QAAQ,EAAE0B,MAAM,EAAEzB,OAAO,EAAE;IACrC,MAAM0B,OAAO,GAAG,IAAIjC,SAAS,CAACkC,OAAO,CAAC5B,QAAQ,EAAE0B,MAAM,EAAEzB,OAAO,CAAC;IAChE,IAAI,CAACG,MAAM,CAACuB,OAAO,CAAC;IACpB,OAAOA,OAAO;EAClB;EACA;AACJ;AACA;AACA;EACIvB,MAAMA,CAACyB,IAAI,EAAE;IACTA,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACE,aAAa,CAAC,CAAC;IAChC,IAAIF,IAAI,CAACG,MAAM,EAAE;MACb;MACA,IAAI,CAAC,CAAC,CAAC,EAAEnC,OAAO,CAACoC,SAAS,EAAEJ,IAAI,CAAC,EAAE;QAC/B,OAAO,IAAI;MACf;MACA;MACAA,IAAI,CAACG,MAAM,CAACE,MAAM,CAACL,IAAI,CAAC;IAC5B;IACA;IACAA,IAAI,CAACM,IAAI,GAAGN,IAAI,CAACC,IAAI,CAACK,IAAI,GAAGN,IAAI,CAACO,OAAO;IACzCP,IAAI,CAACQ,IAAI,GAAGR,IAAI,CAACC,IAAI,CAACO,IAAI,GAAGR,IAAI,CAACO,OAAO;IACzCP,IAAI,CAACS,IAAI,GAAGT,IAAI,CAACC,IAAI,CAACQ,IAAI,GAAGT,IAAI,CAACO,OAAO;IACzCP,IAAI,CAACU,IAAI,GAAGV,IAAI,CAACC,IAAI,CAACS,IAAI,GAAGV,IAAI,CAACO,OAAO;IACzC;IACAP,IAAI,CAACG,MAAM,GAAG,IAAI;IAClB;IACA,OAAO,KAAK,CAAC5B,MAAM,CAACyB,IAAI,CAAC;EAC7B;EACA;AACJ;AACA;EACIW,UAAUA,CAACX,IAAI,EAAE;IACbA,IAAI,CAACW,UAAU,CAAC,CAAC;EACrB;EACA;AACJ;AACA;EACIC,MAAMA,CAAA,EAAG;IACL,CAAC,CAAC,EAAE7C,WAAW,CAAC8C,OAAO,EAAE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAGd,IAAI,IAAK;MAC3C,IAAI,CAACW,UAAU,CAACX,IAAI,CAAC;IACzB,CAAC,CAAC;EACN;EACA;AACJ;AACA;EACIe,IAAIA,CAACC,OAAO,EAAE;IACV,CAAC,CAAC,EAAEjD,WAAW,CAAC8C,OAAO,EAAE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAGd,IAAI,IAAK;MAC3CA,IAAI,CAACe,IAAI,CAACC,OAAO,CAAC;IACtB,CAAC,CAAC;EACN;EACA;AACJ;AACA;EACIC,OAAOA,CAACD,OAAO,EAAE;IACb,MAAME,YAAY,GAAIlB,IAAI,IAAK;MAC3B,CAAC,CAAC,EAAEhC,OAAO,CAACiD,OAAO,EAAED,OAAO,EAAEhB,IAAI,CAAC;MACnC,IAAIA,IAAI,CAACmB,QAAQ,EAAE;QACf,CAAC,CAAC,EAAEpD,WAAW,CAAC8C,OAAO,EAAEb,IAAI,CAACmB,QAAQ,EAAED,YAAY,CAAC;MACzD;IACJ,CAAC;IACD,CAAC,CAAC,EAAEnD,WAAW,CAAC8C,OAAO,EAAE,IAAI,CAACO,IAAI,CAACD,QAAQ,EAAED,YAAY,CAAC;EAC9D;EACA;AACJ;AACA;EACIb,MAAMA,CAACL,IAAI,EAAEqB,MAAM,EAAE;IACjBrB,IAAI,CAACG,MAAM,GAAGmB,SAAS;IACvB,OAAO,KAAK,CAACjB,MAAM,CAACL,IAAI,EAAEqB,MAAM,CAAC;EACrC;EACA;AACJ;AACA;AACA;EACIE,aAAaA,CAACvB,IAAI,EAAE;IAChB;IACA,OAAO,CAAC,CAAC,EAAEjC,WAAW,CAACyD,MAAM,EAAE,IAAI,CAACC,MAAM,CAACzB,IAAI,CAAC,EAAG0B,SAAS,IAAKA,SAAS,KAAK1B,IAAI,CAAC;EACxF;EACA;AACJ;AACA;EACI2B,QAAQA,CAACC,gBAAgB,EAAE;IAAET;EAAS,CAAC,GAAG,IAAI,CAACC,IAAI,EAAE;IACjD,OAAOD,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACU,IAAI,CAAC,CAAC7B,IAAI,EAAE8B,KAAK,KAAK;MACtF,IAAI,CAAC9B,IAAI,EAAE;QACP,OAAO,KAAK;MAChB;MACA,IAAIA,IAAI,CAAC+B,IAAI,IAAIH,gBAAgB,CAAC5B,IAAI,EAAEmB,QAAQ,EAAEW,KAAK,CAAC,EAAE;QACtD,OAAO,IAAI;MACf;MACA;MACA,IAAI9B,IAAI,CAACmB,QAAQ,EAAE;QACf,IAAI,CAACQ,QAAQ,CAACC,gBAAgB,EAAE5B,IAAI,CAAC;MACzC;IACJ,CAAC,CAAC;EACN;AACJ;AACA5C,OAAO,CAACE,UAAU,GAAGA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}