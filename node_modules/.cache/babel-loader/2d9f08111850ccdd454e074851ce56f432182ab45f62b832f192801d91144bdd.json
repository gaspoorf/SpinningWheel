{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaspa\\\\OneDrive\\\\Documents\\\\MMI 2\\\\S4\\\\React\\\\SpinningWheel\\\\spin-wheel\\\\src\\\\components\\\\SpinWheel.jsx\",\n  _s = $RefreshSig$();\n// SpinWheel.jsx\n\nimport React, { useState } from 'react';\nimport './css/wheel.css';\nimport Needle from './Needle'; // Import the Needle component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wheel = () => {\n  _s();\n  const [fields, setFields] = useState([{\n    id: 1,\n    name: '',\n    color: 'lightblue'\n  }]);\n  const [result, setResult] = useState(null);\n  const [selectedSection, setSelectedSection] = useState(null);\n  const [wheelRotation, setWheelRotation] = useState('');\n  const [needlePosition, setNeedlePosition] = useState(0);\n  const handleNeedleClick = () => {\n    const sectionIndex = calculatePointedSection();\n    setResult(sectionIndex);\n    setSelectedSection(sectionIndex);\n  };\n  const calculatePointedSection = () => {\n    const totalFields = fields.length;\n    const angle = 360 / totalFields;\n    const pointedAngle = (360 + needlePosition * 360) % 360;\n    const pointedSection = Math.floor(pointedAngle / angle);\n    return pointedSection;\n  };\n  const handleAddField = () => {\n    const newColor = fields.length % 2 === 0 ? 'lightgreen' : 'lightblue';\n    const newField = {\n      id: fields.length + 1,\n      name: '',\n      color: newColor\n    };\n    setFields(prevFields => [...prevFields, newField]);\n  };\n  const handleRemoveField = () => {\n    if (fields.length > 1) {\n      setFields(prevFields => prevFields.slice(0, -1));\n    }\n  };\n  const handleFieldNameChange = (id, value) => {\n    setFields(prevFields => prevFields.map(field => field.id === id ? {\n      ...field,\n      name: value\n    } : field));\n  };\n  const handleStartSpin = () => {\n    const initialDelay = 100;\n    const totalDuration = 2000;\n    const refreshInterval = 16;\n    setResult(null);\n    const calculateRotation = elapsedTime => {\n      const easing = t => t * (2 - t);\n      const normalizedTime = elapsedTime / totalDuration;\n      const rotatedAngle = 1200 * easing(normalizedTime);\n      return `rotate(${rotatedAngle} 50 50)`;\n    };\n    let startTime = null;\n    const spinAnimation = () => {\n      const currentTime = Date.now();\n      const elapsedTime = currentTime - startTime;\n      if (elapsedTime < totalDuration) {\n        const rotation = calculateRotation(elapsedTime);\n        setWheelRotation(rotation);\n        setNeedlePosition(rotation % 360 / 360);\n      } else {\n        clearInterval(animationInterval);\n        const spinResult = calculateResult();\n        setResult(spinResult);\n        setSelectedSection(spinResult);\n      }\n    };\n    const calculateResult = () => {\n      const totalFields = fields.length;\n      const angle = 360 / totalFields;\n      const needleAngle = needlePosition * 360 % 360;\n      const pointedSection = Math.floor((needleAngle + angle / 2) / angle);\n      return pointedSection;\n    };\n    startTime = Date.now();\n    setWheelRotation(calculateRotation(0)); // Initial rotation\n    const animationInterval = setInterval(spinAnimation, refreshInterval);\n    setTimeout(() => clearInterval(animationInterval), totalDuration + initialDelay);\n  };\n  const calculatePath = index => {\n    const totalFields = fields.length;\n    const angle = 360 / totalFields;\n    const startAngle = index * angle;\n    const endAngle = startAngle + angle;\n    const radius = 50;\n    const startX = 50 + radius * Math.cos(startAngle * Math.PI / 180);\n    const startY = 50 + radius * Math.sin(startAngle * Math.PI / 180);\n    const endX = 50 + radius * Math.cos(endAngle * Math.PI / 180);\n    const endY = 50 + radius * Math.sin(endAngle * Math.PI / 180);\n    const largeArcFlag = angle > 180 ? 1 : 0;\n    const color = index % 2 === 0 ? 'blue' : 'red';\n    const textX = 50 + radius * 0.8 * Math.cos((startAngle + endAngle) / 2 * (Math.PI / 180));\n    const textY = 50 + radius * 0.8 * Math.sin((startAngle + endAngle) / 2 * (Math.PI / 180));\n    return {\n      path: /*#__PURE__*/_jsxDEV(\"path\", {\n        d: `M50 50 L${startX} ${startY} A${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY} Z`,\n        fill: color,\n        stroke: \"black\",\n        strokeWidth: \"1\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this),\n      text: /*#__PURE__*/_jsxDEV(\"text\", {\n        x: textX,\n        y: textY,\n        fontSize: \"5\",\n        textAnchor: \"middle\",\n        fill: \"black\",\n        children: fields[index].name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"roulette-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Wheel Spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wheel\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        viewBox: \"0 0 100 100\",\n        width: \"200\",\n        height: \"200\",\n        children: /*#__PURE__*/_jsxDEV(\"g\", {\n          transform: wheelRotation,\n          children: [fields.map((field, index) => {\n            const {\n              path,\n              text\n            } = calculatePath(index);\n            const isHighlighted = selectedSection !== null && index === selectedSection;\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              className: isHighlighted ? 'highlighted-section' : '',\n              children: [path, text]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this);\n          }), selectedSection !== null && /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"50\",\n            y1: \"5\",\n            x2: \"50\",\n            y2: \"25\",\n            stroke: \"black\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Needle, {\n        needlePosition: needlePosition,\n        onClick: handleNeedleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fields-container\",\n      children: fields.map(field => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: `Champ ${field.id}`,\n        value: field.name,\n        onChange: e => handleFieldNameChange(field.id, e.target.value)\n      }, field.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddField,\n      children: \"Ajouter un champ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRemoveField,\n      disabled: fields.length < 2,\n      children: \"Supprimer un champ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartSpin,\n      disabled: fields.length < 2,\n      children: \"Lancer la roue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), result !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"R\\xE9sultat: \", fields[result].name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(Wheel, \"HMDG2w+SLfqD/s+qJcDO1HeIKjo=\");\n_c = Wheel;\nexport default Wheel;\nvar _c;\n$RefreshReg$(_c, \"Wheel\");","map":{"version":3,"names":["React","useState","Needle","jsxDEV","_jsxDEV","Wheel","_s","fields","setFields","id","name","color","result","setResult","selectedSection","setSelectedSection","wheelRotation","setWheelRotation","needlePosition","setNeedlePosition","handleNeedleClick","sectionIndex","calculatePointedSection","totalFields","length","angle","pointedAngle","pointedSection","Math","floor","handleAddField","newColor","newField","prevFields","handleRemoveField","slice","handleFieldNameChange","value","map","field","handleStartSpin","initialDelay","totalDuration","refreshInterval","calculateRotation","elapsedTime","easing","t","normalizedTime","rotatedAngle","startTime","spinAnimation","currentTime","Date","now","rotation","clearInterval","animationInterval","spinResult","calculateResult","needleAngle","setInterval","setTimeout","calculatePath","index","startAngle","endAngle","radius","startX","cos","PI","startY","sin","endX","endY","largeArcFlag","textX","textY","path","d","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","text","x","y","fontSize","textAnchor","children","className","viewBox","width","height","transform","isHighlighted","x1","y1","x2","y2","strokeLinecap","onClick","type","placeholder","onChange","e","target","disabled","_c","$RefreshReg$"],"sources":["C:/Users/gaspa/OneDrive/Documents/MMI 2/S4/React/SpinningWheel/spin-wheel/src/components/SpinWheel.jsx"],"sourcesContent":["// SpinWheel.jsx\r\n\r\nimport React, { useState } from 'react';\r\nimport './css/wheel.css';\r\n\r\nimport Needle from './Needle'; // Import the Needle component\r\n\r\nconst Wheel = () => {\r\n  const [fields, setFields] = useState([{ id: 1, name: '', color: 'lightblue' }]);\r\n  const [result, setResult] = useState(null);\r\n  const [selectedSection, setSelectedSection] = useState(null);\r\n  const [wheelRotation, setWheelRotation] = useState('');\r\n  const [needlePosition, setNeedlePosition] = useState(0);\r\n\r\n  const handleNeedleClick = () => {\r\n    const sectionIndex = calculatePointedSection();\r\n    setResult(sectionIndex);\r\n    setSelectedSection(sectionIndex);\r\n  };\r\n\r\n  const calculatePointedSection = () => {\r\n    const totalFields = fields.length;\r\n    const angle = 360 / totalFields;\r\n    const pointedAngle = (360 + (needlePosition * 360)) % 360;\r\n    const pointedSection = Math.floor(pointedAngle / angle);\r\n    return pointedSection;\r\n  };\r\n\r\n  const handleAddField = () => {\r\n    const newColor = fields.length % 2 === 0 ? 'lightgreen' : 'lightblue';\r\n    const newField = { id: fields.length + 1, name: '', color: newColor };\r\n    setFields((prevFields) => [...prevFields, newField]);\r\n  };\r\n\r\n  const handleRemoveField = () => {\r\n    if (fields.length > 1) {\r\n      setFields((prevFields) => prevFields.slice(0, -1));\r\n    }\r\n  };\r\n\r\n  const handleFieldNameChange = (id, value) => {\r\n    setFields((prevFields) =>\r\n      prevFields.map((field) => (field.id === id ? { ...field, name: value } : field))\r\n    );\r\n  };\r\n\r\n  const handleStartSpin = () => {\r\n    const initialDelay = 100;\r\n    const totalDuration = 2000;\r\n    const refreshInterval = 16;\r\n    setResult(null);\r\n\r\n    const calculateRotation = (elapsedTime) => {\r\n      const easing = (t) => t * (2 - t);\r\n      const normalizedTime = elapsedTime / totalDuration;\r\n      const rotatedAngle = 1200 * easing(normalizedTime);\r\n      return `rotate(${rotatedAngle} 50 50)`;\r\n    };\r\n\r\n    let startTime = null;\r\n\r\n    const spinAnimation = () => {\r\n      const currentTime = Date.now();\r\n      const elapsedTime = currentTime - startTime;\r\n    \r\n      if (elapsedTime < totalDuration) {\r\n        const rotation = calculateRotation(elapsedTime);\r\n        setWheelRotation(rotation);\r\n        setNeedlePosition((rotation % 360) / 360);\r\n      } else {\r\n        clearInterval(animationInterval);\r\n        const spinResult = calculateResult();\r\n        setResult(spinResult);\r\n        setSelectedSection(spinResult);\r\n      }\r\n    };\r\n    \r\n\r\n    const calculateResult = () => {\r\n      const totalFields = fields.length;\r\n      const angle = 360 / totalFields;\r\n      const needleAngle = (needlePosition * 360) % 360;\r\n      const pointedSection = Math.floor((needleAngle + angle / 2) / angle);\r\n      return pointedSection;\r\n    };\r\n\r\n    startTime = Date.now();\r\n    setWheelRotation(calculateRotation(0)); // Initial rotation\r\n    const animationInterval = setInterval(spinAnimation, refreshInterval);\r\n    setTimeout(() => clearInterval(animationInterval), totalDuration + initialDelay);\r\n  };\r\n\r\n  const calculatePath = (index) => {\r\n    const totalFields = fields.length;\r\n    const angle = 360 / totalFields;\r\n    const startAngle = index * angle;\r\n    const endAngle = startAngle + angle;\r\n    const radius = 50;\r\n\r\n    const startX = 50 + radius * Math.cos((startAngle * Math.PI) / 180);\r\n    const startY = 50 + radius * Math.sin((startAngle * Math.PI) / 180);\r\n    const endX = 50 + radius * Math.cos((endAngle * Math.PI) / 180);\r\n    const endY = 50 + radius * Math.sin((endAngle * Math.PI) / 180);\r\n\r\n    const largeArcFlag = angle > 180 ? 1 : 0;\r\n    const color = index % 2 === 0 ? 'blue' : 'red';\r\n\r\n    const textX = 50 + radius * 0.8 * Math.cos(((startAngle + endAngle) / 2) * (Math.PI / 180));\r\n    const textY = 50 + radius * 0.8 * Math.sin(((startAngle + endAngle) / 2) * (Math.PI / 180));\r\n\r\n    return {\r\n      path: (\r\n        <path\r\n          key={index}\r\n          d={`M50 50 L${startX} ${startY} A${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY} Z`}\r\n          fill={color}\r\n          stroke=\"black\"\r\n          strokeWidth=\"1\"\r\n        />\r\n      ),\r\n      text: (\r\n        <text x={textX} y={textY} fontSize=\"5\" textAnchor=\"middle\" fill=\"black\">\r\n          {fields[index].name}\r\n        </text>\r\n      ),\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"roulette-container\">\r\n      <h2>Wheel Spinner</h2>\r\n      <div className=\"wheel\">\r\n        <svg viewBox=\"0 0 100 100\" width=\"200\" height=\"200\">\r\n          <g transform={wheelRotation}>\r\n            {fields.map((field, index) => {\r\n              const { path, text } = calculatePath(index);\r\n              const isHighlighted = selectedSection !== null && index === selectedSection;\r\n\r\n              return (\r\n                <g key={index} className={isHighlighted ? 'highlighted-section' : ''}>\r\n                  {path}\r\n                  {text}\r\n                </g>\r\n              );\r\n            })}\r\n            {selectedSection !== null && (\r\n              <line\r\n                x1=\"50\"\r\n                y1=\"5\"\r\n                x2=\"50\"\r\n                y2=\"25\"\r\n                stroke=\"black\"\r\n                strokeWidth=\"2\"\r\n                strokeLinecap=\"round\"\r\n              />\r\n            )}\r\n          </g>\r\n        </svg>\r\n        <Needle needlePosition={needlePosition} onClick={handleNeedleClick} />\r\n      </div>\r\n      <div className=\"fields-container\">\r\n        {fields.map((field) => (\r\n          <input\r\n            key={field.id}\r\n            type=\"text\"\r\n            placeholder={`Champ ${field.id}`}\r\n            value={field.name}\r\n            onChange={(e) => handleFieldNameChange(field.id, e.target.value)}\r\n          />\r\n        ))}\r\n      </div>\r\n      <button onClick={handleAddField}>Ajouter un champ</button>\r\n      <button onClick={handleRemoveField} disabled={fields.length < 2}>\r\n        Supprimer un champ\r\n      </button>\r\n      <button onClick={handleStartSpin} disabled={fields.length < 2}>\r\n        Lancer la roue\r\n      </button>\r\n      {result !== null && <p>Résultat: {fields[result].name}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wheel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}