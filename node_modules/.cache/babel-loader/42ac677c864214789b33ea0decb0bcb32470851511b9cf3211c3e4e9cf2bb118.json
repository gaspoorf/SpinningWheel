{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaspa\\\\OneDrive\\\\Documents\\\\MMI 2\\\\S4\\\\React\\\\SpinningWheel\\\\spin-wheel\\\\src\\\\components\\\\SpinWheel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { System, Box, Vector } from 'detect-collisions';\nimport './css/wheel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [results, setResults] = useState(['', '']);\n  const [selectedResult, setSelectedResult] = useState(null);\n  const [spinning, setSpinning] = useState(false);\n  const [customResult, setCustomResult] = useState('');\n  const collisionSystem = new System();\n  const wheelRef = useRef(null);\n  const triangleRef = useRef(null);\n  const handleCustomResultChange = event => {\n    setCustomResult(event.target.value);\n  };\n  const setCustomResultText = () => {\n    if (customResult.trim() !== '') {\n      setResults([...results, customResult]);\n      setCustomResult('');\n    } else {\n      alert('Veuillez saisir du texte.');\n    }\n  };\n  const handleStartSpin = () => {\n    setResults(['', '']); // Réinitialisez les résultats au début de chaque tour\n    setSelectedResult(null);\n    setSpinning(true);\n    const totalDuration = 3000;\n    const start = Date.now();\n    const samples = 200;\n    const spinAnimation = () => {\n      const elapsed = Date.now() - start;\n      const progress = Math.min(elapsed / totalDuration, 1);\n      const easedProgress = 0.5 - 0.5 * Math.cos(progress * Math.PI);\n      const rotation = 1080 * easedProgress;\n      wheelRef.current.style.transform = `rotate(${rotation}deg)`;\n    };\n    const spinInterval = setInterval(spinAnimation, 16);\n    setTimeout(() => {\n      clearInterval(spinInterval);\n      setSpinning(false);\n      const triangleRect = triangleRef.current.getBoundingClientRect();\n      const wheelRect = wheelRef.current.getBoundingClientRect();\n      const triangleCenterX = triangleRect.left + triangleRect.width / 2;\n      const triangleCenterY = triangleRect.top + triangleRect.height / 2;\n      const wheelCenterX = wheelRect.left + wheelRect.width / 2;\n      const wheelCenterY = wheelRect.top + wheelRect.height / 2;\n      const deltaX = triangleCenterX - wheelCenterX;\n      const deltaY = triangleCenterY - wheelCenterY;\n      let angle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;\n      angle = (angle + 360) % 360;\n      const sectionAngle = 360 / results.length;\n      const selectedSectionIndex = Math.floor(angle / sectionAngle);\n      setSelectedResult(selectedSectionIndex !== null ? selectedSectionIndex : 0);\n\n      // Créez un cercle pour représenter la position du triangle\n      const trianglePosition = new Vector(triangleCenterX, triangleCenterY);\n      const triangleRadius = 10; // Ajustez la taille du rayon selon vos besoins\n\n      // Utilisez la fonction de raycasting pour détecter les collisions avec chaque section\n      const hit = collisionSystem.raycast(trianglePosition, trianglePosition);\n      if (hit) {\n        const {\n          body\n        } = hit;\n        console.log('Collision détectée avec la section : ', body.userData);\n        // Faites quelque chose en réponse à la collision ici\n      }\n    }, totalDuration + 100);\n  };\n\n  // Créez et insérez chaque section dans le système de collision\n  results.forEach((_, index) => {\n    const widthDeLaSection = 50; // Ajustez la largeur de chaque section selon vos besoins\n    const heightDeLaSection = 50; // Ajustez la hauteur de chaque section selon vos besoins\n    const wheelCenterX = wheelRef.current.getBoundingClientRect().left + wheelRef.current.getBoundingClientRect().width / 2;\n    const wheelCenterY = wheelRef.current.getBoundingClientRect().top + wheelRef.current.getBoundingClientRect().height / 2;\n    const section = collisionSystem.createBox(new Vector(wheelCenterX, wheelCenterY), widthDeLaSection, heightDeLaSection);\n    section.userData = {\n      sectionIndex: index\n    }; // userData peut être utilisé pour stocker des informations supplémentaires\n    collisionSystem.insert(section);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Roulette Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `roulette ${spinning ? 'spinning' : ''}`,\n      ref: wheelRef,\n      children: [results.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `segment ${selectedResult === index ? 'selected' : ''}`,\n        children: result\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"needle\",\n        ref: triangleRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Nouveau r\\xE9sultat\",\n        value: customResult,\n        onChange: handleCustomResultChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setCustomResultText,\n        children: \"Ajouter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartSpin,\n      disabled: spinning,\n      children: \"Lancer la roulette\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"QTsdKrpUCUSdx0JE1a2zDraTnCw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","System","Box","Vector","jsxDEV","_jsxDEV","App","_s","results","setResults","selectedResult","setSelectedResult","spinning","setSpinning","customResult","setCustomResult","collisionSystem","wheelRef","triangleRef","handleCustomResultChange","event","target","value","setCustomResultText","trim","alert","handleStartSpin","totalDuration","start","Date","now","samples","spinAnimation","elapsed","progress","Math","min","easedProgress","cos","PI","rotation","current","style","transform","spinInterval","setInterval","setTimeout","clearInterval","triangleRect","getBoundingClientRect","wheelRect","triangleCenterX","left","width","triangleCenterY","top","height","wheelCenterX","wheelCenterY","deltaX","deltaY","angle","atan2","sectionAngle","length","selectedSectionIndex","floor","trianglePosition","triangleRadius","hit","raycast","body","console","log","userData","forEach","_","index","widthDeLaSection","heightDeLaSection","section","createBox","sectionIndex","insert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","result","type","placeholder","onChange","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/gaspa/OneDrive/Documents/MMI 2/S4/React/SpinningWheel/spin-wheel/src/components/SpinWheel.jsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { System, Box, Vector } from 'detect-collisions';\r\nimport './css/wheel.css';\r\n\r\nconst App = () => {\r\n  const [results, setResults] = useState(['', '']);\r\n  const [selectedResult, setSelectedResult] = useState(null);\r\n  const [spinning, setSpinning] = useState(false);\r\n  const [customResult, setCustomResult] = useState('');\r\n  const collisionSystem = new System();\r\n\r\n  const wheelRef = useRef(null);\r\n  const triangleRef = useRef(null);\r\n\r\n  const handleCustomResultChange = (event) => {\r\n    setCustomResult(event.target.value);\r\n  };\r\n\r\n  const setCustomResultText = () => {\r\n    if (customResult.trim() !== '') {\r\n      setResults([...results, customResult]);\r\n      setCustomResult('');\r\n    } else {\r\n      alert('Veuillez saisir du texte.');\r\n    }\r\n  };\r\n\r\n  const handleStartSpin = () => {\r\n    setResults(['', '']); // Réinitialisez les résultats au début de chaque tour\r\n    setSelectedResult(null);\r\n    setSpinning(true);\r\n\r\n    const totalDuration = 3000;\r\n    const start = Date.now();\r\n    const samples = 200;\r\n\r\n    const spinAnimation = () => {\r\n      const elapsed = Date.now() - start;\r\n      const progress = Math.min(elapsed / totalDuration, 1);\r\n      const easedProgress = 0.5 - 0.5 * Math.cos(progress * Math.PI);\r\n\r\n      const rotation = 1080 * easedProgress;\r\n      wheelRef.current.style.transform = `rotate(${rotation}deg)`;\r\n    };\r\n\r\n    const spinInterval = setInterval(spinAnimation, 16);\r\n\r\n    setTimeout(() => {\r\n      clearInterval(spinInterval);\r\n      setSpinning(false);\r\n\r\n      const triangleRect = triangleRef.current.getBoundingClientRect();\r\n      const wheelRect = wheelRef.current.getBoundingClientRect();\r\n\r\n      const triangleCenterX = triangleRect.left + triangleRect.width / 2;\r\n      const triangleCenterY = triangleRect.top + triangleRect.height / 2;\r\n\r\n      const wheelCenterX = wheelRect.left + wheelRect.width / 2;\r\n      const wheelCenterY = wheelRect.top + wheelRect.height / 2;\r\n\r\n      const deltaX = triangleCenterX - wheelCenterX;\r\n      const deltaY = triangleCenterY - wheelCenterY;\r\n\r\n      let angle = (Math.atan2(deltaY, deltaX) * 180) / Math.PI;\r\n      angle = (angle + 360) % 360;\r\n\r\n      const sectionAngle = 360 / results.length;\r\n      const selectedSectionIndex = Math.floor(angle / sectionAngle);\r\n\r\n      setSelectedResult(selectedSectionIndex !== null ? selectedSectionIndex : 0);\r\n\r\n      // Créez un cercle pour représenter la position du triangle\r\n      const trianglePosition = new Vector(triangleCenterX, triangleCenterY);\r\n      const triangleRadius = 10; // Ajustez la taille du rayon selon vos besoins\r\n\r\n      // Utilisez la fonction de raycasting pour détecter les collisions avec chaque section\r\n      const hit = collisionSystem.raycast(trianglePosition, trianglePosition);\r\n\r\n      if (hit) {\r\n        const { body } = hit;\r\n        console.log('Collision détectée avec la section : ', body.userData);\r\n        // Faites quelque chose en réponse à la collision ici\r\n      }\r\n    }, totalDuration + 100);\r\n  };\r\n\r\n  // Créez et insérez chaque section dans le système de collision\r\n  results.forEach((_, index) => {\r\n    const widthDeLaSection = 50; // Ajustez la largeur de chaque section selon vos besoins\r\n    const heightDeLaSection = 50; // Ajustez la hauteur de chaque section selon vos besoins\r\n    const wheelCenterX = wheelRef.current.getBoundingClientRect().left + wheelRef.current.getBoundingClientRect().width / 2;\r\n    const wheelCenterY = wheelRef.current.getBoundingClientRect().top + wheelRef.current.getBoundingClientRect().height / 2;\r\n\r\n    const section = collisionSystem.createBox(\r\n      new Vector(wheelCenterX, wheelCenterY),\r\n      widthDeLaSection,\r\n      heightDeLaSection\r\n    );\r\n    section.userData = { sectionIndex: index }; // userData peut être utilisé pour stocker des informations supplémentaires\r\n    collisionSystem.insert(section);\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Roulette Game</h1>\r\n      <div className={`roulette ${spinning ? 'spinning' : ''}`} ref={wheelRef}>\r\n        {results.map((result, index) => (\r\n          <div key={index} className={`segment ${selectedResult === index ? 'selected' : ''}`}>\r\n            {result}\r\n          </div>\r\n        ))}\r\n        <div className=\"needle\" ref={triangleRef}></div>\r\n      </div>\r\n      <div className=\"custom-result-container\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Nouveau résultat\"\r\n          value={customResult}\r\n          onChange={handleCustomResultChange}\r\n        />\r\n        <button onClick={setCustomResultText}>Ajouter</button>\r\n      </div>\r\n      <button onClick={handleStartSpin} disabled={spinning}>\r\n        Lancer la roulette\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}