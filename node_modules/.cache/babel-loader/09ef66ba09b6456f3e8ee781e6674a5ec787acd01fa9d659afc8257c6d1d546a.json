{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaspa\\\\OneDrive\\\\Documents\\\\MMI 2\\\\S4\\\\React\\\\Spin-Wheel\\\\spin-wheel\\\\src\\\\components\\\\SpinWheel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport WheelComponent from 'react-wheel-of-prizes';\nimport './css/wheel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Roulette = () => {\n  _s();\n  const [segments, setSegments] = useState(['Better luck ', '10% off', '5% off']);\n  const [segColors, setSegColors] = useState(['black', '#60BA97', 'black']);\n  const [newSegment, setNewSegment] = useState('');\n  const [newSegColor, setNewSegColor] = useState('#000000');\n  const handleAddSegment = () => {\n    if (newSegment.trim() !== '') {\n      setSegments(prevSegments => [...prevSegments, newSegment]);\n      setSegColors(prevSegColors => [...prevSegColors, newSegColor]);\n      setNewSegment('');\n      setNewSegColor('#000000');\n    }\n  };\n  const onFinished = winner => {\n    console.log(winner);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"roulette-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Spinner wheel Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(WheelComponent, {\n        segments: segments,\n        segColors: segColors,\n        winningSegment: \"Better luck \",\n        onFinished: winner => onFinished(winner),\n        primaryColor: \"black\",\n        contrastColor: \"white\",\n        buttonText: \"Start\",\n        isOnlyOnce: false,\n        size: 300,\n        upDuration: 500,\n        downDuration: 600,\n        fontFamily: \"Helvetica\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"segment-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Nouveau segment\",\n        value: newSegment,\n        onChange: e => setNewSegment(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"color\",\n        value: newSegColor,\n        onChange: e => setNewSegColor(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddSegment,\n        children: \"Ajouter un segment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(Roulette, \"O3+26IFYHeuz2kwCBikL5HtKmeg=\");\n_c = Roulette;\nexport default Roulette;\nvar _c;\n$RefreshReg$(_c, \"Roulette\");","map":{"version":3,"names":["React","useState","WheelComponent","jsxDEV","_jsxDEV","Roulette","_s","segments","setSegments","segColors","setSegColors","newSegment","setNewSegment","newSegColor","setNewSegColor","handleAddSegment","trim","prevSegments","prevSegColors","onFinished","winner","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","winningSegment","primaryColor","contrastColor","buttonText","isOnlyOnce","size","upDuration","downDuration","fontFamily","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/gaspa/OneDrive/Documents/MMI 2/S4/React/Spin-Wheel/spin-wheel/src/components/SpinWheel.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport WheelComponent from 'react-wheel-of-prizes';\r\nimport './css/wheel.css';\r\n\r\nconst Roulette = () => {\r\n  const [segments, setSegments] = useState(['Better luck ', '10% off', '5% off']);\r\n  const [segColors, setSegColors] = useState(['black', '#60BA97', 'black']);\r\n  const [newSegment, setNewSegment] = useState('');\r\n  const [newSegColor, setNewSegColor] = useState('#000000');\r\n\r\n  const handleAddSegment = () => {\r\n    if (newSegment.trim() !== '') {\r\n      setSegments(prevSegments => [...prevSegments, newSegment]);\r\n      setSegColors(prevSegColors => [...prevSegColors, newSegColor]);\r\n      setNewSegment('');\r\n      setNewSegColor('#000000');\r\n    }\r\n  };\r\n\r\n  const onFinished = winner => {\r\n    console.log(winner);\r\n  };\r\n\r\n  return (\r\n    <div className=\"roulette-container\">\r\n      <h1>Spinner wheel Demo</h1>\r\n      <div>\r\n        <WheelComponent\r\n          segments={segments}\r\n          segColors={segColors}\r\n          winningSegment=\"Better luck \"\r\n          onFinished={winner => onFinished(winner)}\r\n          primaryColor=\"black\"\r\n          contrastColor=\"white\"\r\n          buttonText=\"Start\"\r\n          isOnlyOnce={false}\r\n          size={300}\r\n          upDuration={500}\r\n          downDuration={600}\r\n          fontFamily=\"Helvetica\"\r\n        />\r\n      </div>\r\n      <div className=\"segment-input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Nouveau segment\"\r\n          value={newSegment}\r\n          onChange={e => setNewSegment(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"color\"\r\n          value={newSegColor}\r\n          onChange={e => setNewSegColor(e.target.value)}\r\n        />\r\n        <button onClick={handleAddSegment}>Ajouter un segment</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Roulette;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}