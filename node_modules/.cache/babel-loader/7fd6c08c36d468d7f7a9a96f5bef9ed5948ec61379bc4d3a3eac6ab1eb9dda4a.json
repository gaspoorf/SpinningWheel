{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.intersectLinePolygon = exports.intersectLineLine = exports.intersectLineLineFast = exports.intersectLineCircle = exports.circleOutsidePolygon = exports.circleInPolygon = exports.circleInCircle = exports.pointOnCircle = exports.polygonInPolygon = exports.pointInPolygon = exports.polygonInCircle = exports.ensureConvex = void 0;\nconst sat_1 = require(\"sat\");\nconst model_1 = require(\"./model\");\nconst optimized_1 = require(\"./optimized\");\n/**\n * replace body with array of related convex polygons\n */\nfunction ensureConvex(body) {\n  if (body.isConvex || body.type !== model_1.BodyType.Polygon) {\n    return [body];\n  }\n  return body.convexPolygons;\n}\nexports.ensureConvex = ensureConvex;\nfunction polygonInCircle(polygon, circle) {\n  return (0, optimized_1.every)(polygon.calcPoints, p => (0, sat_1.pointInCircle)({\n    x: p.x + polygon.pos.x,\n    y: p.y + polygon.pos.y\n  }, circle));\n}\nexports.polygonInCircle = polygonInCircle;\nfunction pointInPolygon(point, polygon) {\n  return (0, optimized_1.some)(ensureConvex(polygon), convex => (0, sat_1.pointInPolygon)(point, convex));\n}\nexports.pointInPolygon = pointInPolygon;\nfunction polygonInPolygon(polygonA, polygonB) {\n  return (0, optimized_1.every)(polygonA.calcPoints, point => pointInPolygon({\n    x: point.x + polygonA.pos.x,\n    y: point.y + polygonA.pos.y\n  }, polygonB));\n}\nexports.polygonInPolygon = polygonInPolygon;\n/**\n * https://stackoverflow.com/a/68197894/1749528\n */\nfunction pointOnCircle(point, circle) {\n  return (point.x - circle.pos.x) * (point.x - circle.pos.x) + (point.y - circle.pos.y) * (point.y - circle.pos.y) === circle.r * circle.r;\n}\nexports.pointOnCircle = pointOnCircle;\n/**\n * https://stackoverflow.com/a/68197894/1749528\n */\nfunction circleInCircle(bodyA, bodyB) {\n  const x1 = bodyA.pos.x;\n  const y1 = bodyA.pos.y;\n  const x2 = bodyB.pos.x;\n  const y2 = bodyB.pos.y;\n  const r1 = bodyA.r;\n  const r2 = bodyB.r;\n  const distSq = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n  return distSq + r2 === r1 || distSq + r2 < r1;\n}\nexports.circleInCircle = circleInCircle;\n/**\n * https://stackoverflow.com/a/68197894/1749528\n */\nfunction circleInPolygon(circle, polygon) {\n  // Circle with radius 0 isn't a circle\n  if (circle.r === 0) {\n    return false;\n  }\n  // If the center of the circle is not within the polygon,\n  // then the circle may overlap, but it'll never be \"contained\"\n  // so return false\n  if (!pointInPolygon(circle.pos, polygon)) {\n    return false;\n  }\n  // Necessary add polygon pos to points\n  const points = (0, optimized_1.map)(polygon.calcPoints, ({\n    x,\n    y\n  }) => ({\n    x: x + polygon.pos.x,\n    y: y + polygon.pos.y\n  }));\n  // If the center of the circle is within the polygon,\n  // the circle is not outside of the polygon completely.\n  // so return false.\n  if ((0, optimized_1.some)(points, point => (0, sat_1.pointInCircle)(point, circle))) {\n    return false;\n  }\n  // If any line-segment of the polygon intersects the circle,\n  // the circle is not \"contained\"\n  // so return false\n  if ((0, optimized_1.some)(points, (end, index) => {\n    const start = index ? points[index - 1] : points[points.length - 1];\n    return intersectLineCircle({\n      start,\n      end\n    }, circle).length > 0;\n  })) {\n    return false;\n  }\n  return true;\n}\nexports.circleInPolygon = circleInPolygon;\n/**\n * https://stackoverflow.com/a/68197894/1749528\n */\nfunction circleOutsidePolygon(circle, polygon) {\n  // Circle with radius 0 isn't a circle\n  if (circle.r === 0) {\n    return false;\n  }\n  // If the center of the circle is within the polygon,\n  // the circle is not outside of the polygon completely.\n  // so return false.\n  if (pointInPolygon(circle.pos, polygon)) {\n    return false;\n  }\n  // Necessary add polygon pos to points\n  const points = (0, optimized_1.map)(polygon.calcPoints, ({\n    x,\n    y\n  }) => ({\n    x: x + polygon.pos.x,\n    y: y + polygon.pos.y\n  }));\n  // If the center of the circle is within the polygon,\n  // the circle is not outside of the polygon completely.\n  // so return false.\n  if ((0, optimized_1.some)(points, point => (0, sat_1.pointInCircle)(point, circle) || pointOnCircle(point, circle))) {\n    return false;\n  }\n  // If any line-segment of the polygon intersects the circle,\n  // the circle is not \"contained\"\n  // so return false\n  if ((0, optimized_1.some)(points, (end, index) => {\n    const start = index ? points[index - 1] : points[points.length - 1];\n    return intersectLineCircle({\n      start,\n      end\n    }, circle).length > 0;\n  })) {\n    return false;\n  }\n  return true;\n}\nexports.circleOutsidePolygon = circleOutsidePolygon;\n/**\n * https://stackoverflow.com/a/37225895/1749528\n */\nfunction intersectLineCircle(line, {\n  pos,\n  r\n}) {\n  const v1 = {\n    x: line.end.x - line.start.x,\n    y: line.end.y - line.start.y\n  };\n  const v2 = {\n    x: line.start.x - pos.x,\n    y: line.start.y - pos.y\n  };\n  const b = (v1.x * v2.x + v1.y * v2.y) * -2;\n  const c = (v1.x * v1.x + v1.y * v1.y) * 2;\n  const d = Math.sqrt(b * b - (v2.x * v2.x + v2.y * v2.y - r * r) * c * 2);\n  if (isNaN(d)) {\n    // no intercept\n    return [];\n  }\n  const u1 = (b - d) / c; // these represent the unit distance of point one and two on the line\n  const u2 = (b + d) / c;\n  const results = []; // return array\n  if (u1 <= 1 && u1 >= 0) {\n    // add point if on the line segment\n    results.push({\n      x: line.start.x + v1.x * u1,\n      y: line.start.y + v1.y * u1\n    });\n  }\n  if (u2 <= 1 && u2 >= 0) {\n    // second add point if on the line segment\n    results.push({\n      x: line.start.x + v1.x * u2,\n      y: line.start.y + v1.y * u2\n    });\n  }\n  return results;\n}\nexports.intersectLineCircle = intersectLineCircle;\n/**\n * helper for intersectLineLineFast\n */\nfunction isTurn(point1, point2, point3) {\n  const A = (point3.x - point1.x) * (point2.y - point1.y);\n  const B = (point2.x - point1.x) * (point3.y - point1.y);\n  return A > B + Number.EPSILON ? 1 : A + Number.EPSILON < B ? -1 : 0;\n}\n/**\n * faster implementation of intersectLineLine\n * https://stackoverflow.com/a/16725715/1749528\n */\nfunction intersectLineLineFast(line1, line2) {\n  return isTurn(line1.start, line2.start, line2.end) !== isTurn(line1.end, line2.start, line2.end) && isTurn(line1.start, line1.end, line2.start) !== isTurn(line1.start, line1.end, line2.end);\n}\nexports.intersectLineLineFast = intersectLineLineFast;\n/**\n * returns the point of intersection\n * https://stackoverflow.com/a/24392281/1749528\n */\nfunction intersectLineLine(line1, line2) {\n  const dX = line1.end.x - line1.start.x;\n  const dY = line1.end.y - line1.start.y;\n  const determinant = dX * (line2.end.y - line2.start.y) - (line2.end.x - line2.start.x) * dY;\n  if (determinant === 0) {\n    return null;\n  }\n  const lambda = ((line2.end.y - line2.start.y) * (line2.end.x - line1.start.x) + (line2.start.x - line2.end.x) * (line2.end.y - line1.start.y)) / determinant;\n  const gamma = ((line1.start.y - line1.end.y) * (line2.end.x - line1.start.x) + dX * (line2.end.y - line1.start.y)) / determinant;\n  // check if there is an intersection\n  if (!(lambda >= 0 && lambda <= 1) || !(gamma >= 0 && gamma <= 1)) {\n    return null;\n  }\n  return {\n    x: line1.start.x + lambda * dX,\n    y: line1.start.y + lambda * dY\n  };\n}\nexports.intersectLineLine = intersectLineLine;\nfunction intersectLinePolygon(line, polygon) {\n  const results = [];\n  (0, optimized_1.forEach)(polygon.calcPoints, (to, index) => {\n    const from = index ? polygon.calcPoints[index - 1] : polygon.calcPoints[polygon.calcPoints.length - 1];\n    const side = {\n      start: {\n        x: from.x + polygon.pos.x,\n        y: from.y + polygon.pos.y\n      },\n      end: {\n        x: to.x + polygon.pos.x,\n        y: to.y + polygon.pos.y\n      }\n    };\n    const hit = intersectLineLine(line, side);\n    if (hit) {\n      results.push(hit);\n    }\n  });\n  return results;\n}\nexports.intersectLinePolygon = intersectLinePolygon;","map":{"version":3,"names":["Object","defineProperty","exports","value","intersectLinePolygon","intersectLineLine","intersectLineLineFast","intersectLineCircle","circleOutsidePolygon","circleInPolygon","circleInCircle","pointOnCircle","polygonInPolygon","pointInPolygon","polygonInCircle","ensureConvex","sat_1","require","model_1","optimized_1","body","isConvex","type","BodyType","Polygon","convexPolygons","polygon","circle","every","calcPoints","p","pointInCircle","x","pos","y","point","some","convex","polygonA","polygonB","r","bodyA","bodyB","x1","y1","x2","y2","r1","r2","distSq","Math","sqrt","points","map","end","index","start","length","line","v1","v2","b","c","d","isNaN","u1","u2","results","push","isTurn","point1","point2","point3","A","B","Number","EPSILON","line1","line2","dX","dY","determinant","lambda","gamma","forEach","to","from","side","hit"],"sources":["C:/Users/gaspa/OneDrive/Documents/MMI 2/S4/React/SpinningWheel/spin-wheel/node_modules/detect-collisions/dist/intersect.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.intersectLinePolygon = exports.intersectLineLine = exports.intersectLineLineFast = exports.intersectLineCircle = exports.circleOutsidePolygon = exports.circleInPolygon = exports.circleInCircle = exports.pointOnCircle = exports.polygonInPolygon = exports.pointInPolygon = exports.polygonInCircle = exports.ensureConvex = void 0;\nconst sat_1 = require(\"sat\");\nconst model_1 = require(\"./model\");\nconst optimized_1 = require(\"./optimized\");\n/**\n * replace body with array of related convex polygons\n */\nfunction ensureConvex(body) {\n    if (body.isConvex || body.type !== model_1.BodyType.Polygon) {\n        return [body];\n    }\n    return body.convexPolygons;\n}\nexports.ensureConvex = ensureConvex;\nfunction polygonInCircle(polygon, circle) {\n    return (0, optimized_1.every)(polygon.calcPoints, (p) => (0, sat_1.pointInCircle)({ x: p.x + polygon.pos.x, y: p.y + polygon.pos.y }, circle));\n}\nexports.polygonInCircle = polygonInCircle;\nfunction pointInPolygon(point, polygon) {\n    return (0, optimized_1.some)(ensureConvex(polygon), (convex) => (0, sat_1.pointInPolygon)(point, convex));\n}\nexports.pointInPolygon = pointInPolygon;\nfunction polygonInPolygon(polygonA, polygonB) {\n    return (0, optimized_1.every)(polygonA.calcPoints, (point) => pointInPolygon({ x: point.x + polygonA.pos.x, y: point.y + polygonA.pos.y }, polygonB));\n}\nexports.polygonInPolygon = polygonInPolygon;\n/**\n * https://stackoverflow.com/a/68197894/1749528\n */\nfunction pointOnCircle(point, circle) {\n    return ((point.x - circle.pos.x) * (point.x - circle.pos.x) +\n        (point.y - circle.pos.y) * (point.y - circle.pos.y) ===\n        circle.r * circle.r);\n}\nexports.pointOnCircle = pointOnCircle;\n/**\n * https://stackoverflow.com/a/68197894/1749528\n */\nfunction circleInCircle(bodyA, bodyB) {\n    const x1 = bodyA.pos.x;\n    const y1 = bodyA.pos.y;\n    const x2 = bodyB.pos.x;\n    const y2 = bodyB.pos.y;\n    const r1 = bodyA.r;\n    const r2 = bodyB.r;\n    const distSq = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n    return distSq + r2 === r1 || distSq + r2 < r1;\n}\nexports.circleInCircle = circleInCircle;\n/**\n * https://stackoverflow.com/a/68197894/1749528\n */\nfunction circleInPolygon(circle, polygon) {\n    // Circle with radius 0 isn't a circle\n    if (circle.r === 0) {\n        return false;\n    }\n    // If the center of the circle is not within the polygon,\n    // then the circle may overlap, but it'll never be \"contained\"\n    // so return false\n    if (!pointInPolygon(circle.pos, polygon)) {\n        return false;\n    }\n    // Necessary add polygon pos to points\n    const points = (0, optimized_1.map)(polygon.calcPoints, ({ x, y }) => ({\n        x: x + polygon.pos.x,\n        y: y + polygon.pos.y,\n    }));\n    // If the center of the circle is within the polygon,\n    // the circle is not outside of the polygon completely.\n    // so return false.\n    if ((0, optimized_1.some)(points, (point) => (0, sat_1.pointInCircle)(point, circle))) {\n        return false;\n    }\n    // If any line-segment of the polygon intersects the circle,\n    // the circle is not \"contained\"\n    // so return false\n    if ((0, optimized_1.some)(points, (end, index) => {\n        const start = index\n            ? points[index - 1]\n            : points[points.length - 1];\n        return intersectLineCircle({ start, end }, circle).length > 0;\n    })) {\n        return false;\n    }\n    return true;\n}\nexports.circleInPolygon = circleInPolygon;\n/**\n * https://stackoverflow.com/a/68197894/1749528\n */\nfunction circleOutsidePolygon(circle, polygon) {\n    // Circle with radius 0 isn't a circle\n    if (circle.r === 0) {\n        return false;\n    }\n    // If the center of the circle is within the polygon,\n    // the circle is not outside of the polygon completely.\n    // so return false.\n    if (pointInPolygon(circle.pos, polygon)) {\n        return false;\n    }\n    // Necessary add polygon pos to points\n    const points = (0, optimized_1.map)(polygon.calcPoints, ({ x, y }) => ({\n        x: x + polygon.pos.x,\n        y: y + polygon.pos.y,\n    }));\n    // If the center of the circle is within the polygon,\n    // the circle is not outside of the polygon completely.\n    // so return false.\n    if ((0, optimized_1.some)(points, (point) => (0, sat_1.pointInCircle)(point, circle) || pointOnCircle(point, circle))) {\n        return false;\n    }\n    // If any line-segment of the polygon intersects the circle,\n    // the circle is not \"contained\"\n    // so return false\n    if ((0, optimized_1.some)(points, (end, index) => {\n        const start = index\n            ? points[index - 1]\n            : points[points.length - 1];\n        return intersectLineCircle({ start, end }, circle).length > 0;\n    })) {\n        return false;\n    }\n    return true;\n}\nexports.circleOutsidePolygon = circleOutsidePolygon;\n/**\n * https://stackoverflow.com/a/37225895/1749528\n */\nfunction intersectLineCircle(line, { pos, r }) {\n    const v1 = { x: line.end.x - line.start.x, y: line.end.y - line.start.y };\n    const v2 = { x: line.start.x - pos.x, y: line.start.y - pos.y };\n    const b = (v1.x * v2.x + v1.y * v2.y) * -2;\n    const c = (v1.x * v1.x + v1.y * v1.y) * 2;\n    const d = Math.sqrt(b * b - (v2.x * v2.x + v2.y * v2.y - r * r) * c * 2);\n    if (isNaN(d)) {\n        // no intercept\n        return [];\n    }\n    const u1 = (b - d) / c; // these represent the unit distance of point one and two on the line\n    const u2 = (b + d) / c;\n    const results = []; // return array\n    if (u1 <= 1 && u1 >= 0) {\n        // add point if on the line segment\n        results.push({ x: line.start.x + v1.x * u1, y: line.start.y + v1.y * u1 });\n    }\n    if (u2 <= 1 && u2 >= 0) {\n        // second add point if on the line segment\n        results.push({ x: line.start.x + v1.x * u2, y: line.start.y + v1.y * u2 });\n    }\n    return results;\n}\nexports.intersectLineCircle = intersectLineCircle;\n/**\n * helper for intersectLineLineFast\n */\nfunction isTurn(point1, point2, point3) {\n    const A = (point3.x - point1.x) * (point2.y - point1.y);\n    const B = (point2.x - point1.x) * (point3.y - point1.y);\n    return A > B + Number.EPSILON ? 1 : A + Number.EPSILON < B ? -1 : 0;\n}\n/**\n * faster implementation of intersectLineLine\n * https://stackoverflow.com/a/16725715/1749528\n */\nfunction intersectLineLineFast(line1, line2) {\n    return (isTurn(line1.start, line2.start, line2.end) !==\n        isTurn(line1.end, line2.start, line2.end) &&\n        isTurn(line1.start, line1.end, line2.start) !==\n            isTurn(line1.start, line1.end, line2.end));\n}\nexports.intersectLineLineFast = intersectLineLineFast;\n/**\n * returns the point of intersection\n * https://stackoverflow.com/a/24392281/1749528\n */\nfunction intersectLineLine(line1, line2) {\n    const dX = line1.end.x - line1.start.x;\n    const dY = line1.end.y - line1.start.y;\n    const determinant = dX * (line2.end.y - line2.start.y) - (line2.end.x - line2.start.x) * dY;\n    if (determinant === 0) {\n        return null;\n    }\n    const lambda = ((line2.end.y - line2.start.y) * (line2.end.x - line1.start.x) +\n        (line2.start.x - line2.end.x) * (line2.end.y - line1.start.y)) /\n        determinant;\n    const gamma = ((line1.start.y - line1.end.y) * (line2.end.x - line1.start.x) +\n        dX * (line2.end.y - line1.start.y)) /\n        determinant;\n    // check if there is an intersection\n    if (!(lambda >= 0 && lambda <= 1) || !(gamma >= 0 && gamma <= 1)) {\n        return null;\n    }\n    return { x: line1.start.x + lambda * dX, y: line1.start.y + lambda * dY };\n}\nexports.intersectLineLine = intersectLineLine;\nfunction intersectLinePolygon(line, polygon) {\n    const results = [];\n    (0, optimized_1.forEach)(polygon.calcPoints, (to, index) => {\n        const from = index\n            ? polygon.calcPoints[index - 1]\n            : polygon.calcPoints[polygon.calcPoints.length - 1];\n        const side = {\n            start: { x: from.x + polygon.pos.x, y: from.y + polygon.pos.y },\n            end: { x: to.x + polygon.pos.x, y: to.y + polygon.pos.y },\n        };\n        const hit = intersectLineLine(line, side);\n        if (hit) {\n            results.push(hit);\n        }\n    });\n    return results;\n}\nexports.intersectLinePolygon = intersectLinePolygon;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}