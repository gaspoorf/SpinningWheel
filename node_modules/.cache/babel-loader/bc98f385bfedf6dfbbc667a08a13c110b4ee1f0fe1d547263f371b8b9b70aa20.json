{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Line = void 0;\nconst sat_1 = require(\"sat\");\nconst model_1 = require(\"../model\");\nconst polygon_1 = require(\"./polygon\");\n/**\n * collider - line\n */\nclass Line extends polygon_1.Polygon {\n  /**\n   * collider - line from start to end\n   */\n  constructor(start, end, options) {\n    super(start, [{\n      x: 0,\n      y: 0\n    }, {\n      x: end.x - start.x,\n      y: end.y - start.y\n    }], options);\n    /**\n     * line type\n     */\n    this.type = model_1.BodyType.Line;\n    /**\n     * line is convex\n     */\n    this.isConvex = true;\n    if (this.calcPoints.length === 1 || !end) {\n      console.error({\n        start,\n        end\n      });\n      throw new Error(\"No end point for line provided\");\n    }\n  }\n  get start() {\n    return {\n      x: this.x + this.calcPoints[0].x,\n      y: this.y + this.calcPoints[0].y\n    };\n  }\n  set start({\n    x,\n    y\n  }) {\n    this.x = x;\n    this.y = y;\n  }\n  get end() {\n    return {\n      x: this.x + this.calcPoints[1].x,\n      y: this.y + this.calcPoints[1].y\n    };\n  }\n  set end({\n    x,\n    y\n  }) {\n    this.points[1].x = x - this.start.x;\n    this.points[1].y = y - this.start.y;\n    this.setPoints(this.points);\n  }\n  getCentroid() {\n    return new sat_1.Vector((this.end.x - this.start.x) / 2, (this.end.y - this.start.y) / 2);\n  }\n  /**\n   * do not attempt to use Polygon.updateIsConvex()\n   */\n  updateIsConvex() {\n    return;\n  }\n}\nexports.Line = Line;","map":{"version":3,"names":["Object","defineProperty","exports","value","Line","sat_1","require","model_1","polygon_1","Polygon","constructor","start","end","options","x","y","type","BodyType","isConvex","calcPoints","length","console","error","Error","points","setPoints","getCentroid","Vector","updateIsConvex"],"sources":["C:/Users/gaspa/OneDrive/Documents/MMI 2/S4/React/SpinningWheel/spin-wheel/node_modules/detect-collisions/dist/bodies/line.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Line = void 0;\nconst sat_1 = require(\"sat\");\nconst model_1 = require(\"../model\");\nconst polygon_1 = require(\"./polygon\");\n/**\n * collider - line\n */\nclass Line extends polygon_1.Polygon {\n    /**\n     * collider - line from start to end\n     */\n    constructor(start, end, options) {\n        super(start, [\n            { x: 0, y: 0 },\n            { x: end.x - start.x, y: end.y - start.y },\n        ], options);\n        /**\n         * line type\n         */\n        this.type = model_1.BodyType.Line;\n        /**\n         * line is convex\n         */\n        this.isConvex = true;\n        if (this.calcPoints.length === 1 || !end) {\n            console.error({ start, end });\n            throw new Error(\"No end point for line provided\");\n        }\n    }\n    get start() {\n        return {\n            x: this.x + this.calcPoints[0].x,\n            y: this.y + this.calcPoints[0].y,\n        };\n    }\n    set start({ x, y }) {\n        this.x = x;\n        this.y = y;\n    }\n    get end() {\n        return {\n            x: this.x + this.calcPoints[1].x,\n            y: this.y + this.calcPoints[1].y,\n        };\n    }\n    set end({ x, y }) {\n        this.points[1].x = x - this.start.x;\n        this.points[1].y = y - this.start.y;\n        this.setPoints(this.points);\n    }\n    getCentroid() {\n        return new sat_1.Vector((this.end.x - this.start.x) / 2, (this.end.y - this.start.y) / 2);\n    }\n    /**\n     * do not attempt to use Polygon.updateIsConvex()\n     */\n    updateIsConvex() {\n        return;\n    }\n}\nexports.Line = Line;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}