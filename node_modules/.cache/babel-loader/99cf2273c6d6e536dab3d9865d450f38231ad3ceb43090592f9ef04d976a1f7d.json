{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaspa\\\\OneDrive\\\\Documents\\\\MMI 2\\\\S4\\\\React\\\\SpinningWheel\\\\spin-wheel\\\\src\\\\components\\\\SpinWheel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './css/wheel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst triangle = /*#__PURE__*/_jsxDEV(\"polygon\", {\n  points: \"50,5 55,-5 45,-5\",\n  fill: \"yellow\",\n  stroke: \"black\",\n  strokeWidth: \"1\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 3\n}, this);\nconst Wheel = () => {\n  _s();\n  const [fields, setFields] = useState([{\n    id: 1,\n    name: 'Section 1',\n    color: 'lightgreen'\n  }, {\n    id: 2,\n    name: 'Section 2',\n    color: 'lightblue'\n  }]);\n  const [result, setResult] = useState(null);\n  const [rotation, setRotation] = useState(0);\n  const [isSpinning, setIsSpinning] = useState(false);\n  const wheelRef = useRef(null);\n  const triangleRef = useRef(null);\n  const handleAddField = () => {\n    const newColor = fields.length % 2 === 0 ? 'lightgreen' : 'lightblue';\n    const newField = {\n      id: fields.length + 1,\n      name: `Section ${fields.length + 1}`,\n      color: newColor\n    };\n    setFields(prevFields => [...prevFields, newField]);\n  };\n  const handleRemoveField = () => {\n    if (fields.length > 1) {\n      setFields(prevFields => prevFields.slice(0, -1));\n    }\n  };\n  const handleFieldNameChange = (id, value) => {\n    setFields(prevFields => prevFields.map(field => field.id === id ? {\n      ...field,\n      name: value\n    } : field));\n  };\n  const handleStartSpin = () => {\n    setResult(null);\n    setIsSpinning(true);\n    const totalDuration = 3000;\n    const start = Date.now();\n    const samples = 200;\n    const spinAnimation = () => {\n      const elapsed = Date.now() - start;\n      const progress = Math.min(elapsed / totalDuration, 1);\n      const easedProgress = 0.5 - 0.5 * Math.cos(progress * Math.PI);\n      const numCompleteTurns = Math.floor(Math.random() * 10); // Nombre aléatoire de tours complets (ajustez si nécessaire)\n      const randomRotation = Math.random() * 360; // Rotation aléatoire pour le positionnement final\n      const rotation = 1080 * easedProgress * numCompleteTurns + randomRotation;\n      setRotation(rotation);\n    };\n    const spinInterval = setInterval(spinAnimation, 16);\n    setTimeout(() => {\n      clearInterval(spinInterval);\n      setIsSpinning(false);\n      const wheelRect = wheelRef.current.getBoundingClientRect();\n      const triangleRect = triangleRef.current.getBoundingClientRect();\n      const triangleCenterX = triangleRect.left + triangleRect.width / 2;\n      const triangleCenterY = triangleRect.top + triangleRect.height / 2;\n      const wheelCenterX = wheelRect.left + wheelRect.width / 2;\n      const wheelCenterY = wheelRect.top + wheelRect.height / 2;\n      const angle = Math.atan2(triangleCenterY - wheelCenterY, triangleCenterX - wheelCenterX) * (180 / Math.PI);\n      const normalizedAngle = (angle + 360) % 360;\n      const sectionAngle = 360 / fields.length;\n      const selectedSectionIndex = Math.floor(normalizedAngle / sectionAngle);\n      setResult(selectedSectionIndex !== null ? selectedSectionIndex : 0);\n    }, totalDuration + 100);\n  };\n  const calculatePath = index => {\n    const totalFields = fields.length;\n    const angle = 360 / totalFields * index;\n    const startAngle = angle;\n    const endAngle = angle + 360 / totalFields;\n    const radius = 50;\n    const startX = 50 + radius * Math.cos(startAngle * Math.PI / 180);\n    const startY = 50 + radius * Math.sin(startAngle * Math.PI / 180);\n    const endX = 50 + radius * Math.cos(endAngle * Math.PI / 180);\n    const endY = 50 + radius * Math.sin(endAngle * Math.PI / 180);\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n    const color = fields[index].color;\n    const textX = 50 + radius * 0.8 * Math.cos((startAngle + endAngle) / 2 * (Math.PI / 180));\n    const textY = 50 + radius * 0.8 * Math.sin((startAngle + endAngle) / 2 * (Math.PI / 180));\n    return {\n      path: /*#__PURE__*/_jsxDEV(\"path\", {\n        d: `M50 50 L${startX} ${startY} A${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY} Z`,\n        fill: color,\n        stroke: \"black\",\n        strokeWidth: \"1\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this),\n      text: /*#__PURE__*/_jsxDEV(\"text\", {\n        x: textX,\n        y: textY,\n        fontSize: \"5\",\n        textAnchor: \"middle\",\n        fill: \"black\",\n        children: fields[index].name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wheel-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Wheel Spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wheel\",\n      ref: wheelRef,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        viewBox: \"0 0 100 100\",\n        width: \"200\",\n        height: \"200\",\n        children: [/*#__PURE__*/_jsxDEV(\"g\", {\n          transform: `rotate(${rotation} 50 50)`,\n          children: fields.map((_, index) => {\n            const {\n              path,\n              text\n            } = calculatePath(index);\n            const isHighlighted = !isSpinning && result !== null && index === result;\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              className: isHighlighted ? 'highlighted-section selected-indicator' : 'selected-indicator',\n              children: [path, text]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          ref: triangleRef,\n          children: triangle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fields-container\",\n      children: fields.map(field => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: `Champ ${field.id}`,\n        value: field.name,\n        onChange: e => handleFieldNameChange(field.id, e.target.value)\n      }, field.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddField,\n      children: \"Ajouter un champ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRemoveField,\n      disabled: fields.length < 2,\n      children: \"Supprimer un champ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartSpin,\n      disabled: fields.length < 2 || isSpinning,\n      children: \"Lancer la roue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), result !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"R\\xE9sultat: \", fields[result].name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(Wheel, \"nQOTKxztTPpSuzFktdSKMDO3vos=\");\n_c = Wheel;\nexport default Wheel;\nvar _c;\n$RefreshReg$(_c, \"Wheel\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","triangle","points","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","Wheel","_s","fields","setFields","id","name","color","result","setResult","rotation","setRotation","isSpinning","setIsSpinning","wheelRef","triangleRef","handleAddField","newColor","length","newField","prevFields","handleRemoveField","slice","handleFieldNameChange","value","map","field","handleStartSpin","totalDuration","start","Date","now","samples","spinAnimation","elapsed","progress","Math","min","easedProgress","cos","PI","numCompleteTurns","floor","random","randomRotation","spinInterval","setInterval","setTimeout","clearInterval","wheelRect","current","getBoundingClientRect","triangleRect","triangleCenterX","left","width","triangleCenterY","top","height","wheelCenterX","wheelCenterY","angle","atan2","normalizedAngle","sectionAngle","selectedSectionIndex","calculatePath","index","totalFields","startAngle","endAngle","radius","startX","startY","sin","endX","endY","largeArcFlag","textX","textY","path","d","text","x","y","fontSize","textAnchor","children","className","ref","viewBox","transform","_","isHighlighted","type","placeholder","onChange","e","target","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/gaspa/OneDrive/Documents/MMI 2/S4/React/SpinningWheel/spin-wheel/src/components/SpinWheel.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './css/wheel.css';\r\n\r\nconst triangle = (\r\n  <polygon\r\n    points=\"50,5 55,-5 45,-5\"\r\n    fill=\"yellow\"\r\n    stroke=\"black\"\r\n    strokeWidth=\"1\"\r\n  />\r\n);\r\n\r\nconst Wheel = () => {\r\n  const [fields, setFields] = useState([\r\n    { id: 1, name: 'Section 1', color: 'lightgreen' },\r\n    { id: 2, name: 'Section 2', color: 'lightblue' },\r\n  ]);\r\n  const [result, setResult] = useState(null);\r\n  const [rotation, setRotation] = useState(0);\r\n  const [isSpinning, setIsSpinning] = useState(false);\r\n\r\n  const wheelRef = useRef(null);\r\n  const triangleRef = useRef(null);\r\n\r\n  const handleAddField = () => {\r\n    const newColor = fields.length % 2 === 0 ? 'lightgreen' : 'lightblue';\r\n    const newField = { id: fields.length + 1, name: `Section ${fields.length + 1}`, color: newColor };\r\n    setFields((prevFields) => [...prevFields, newField]);\r\n  };\r\n\r\n  const handleRemoveField = () => {\r\n    if (fields.length > 1) {\r\n      setFields((prevFields) => prevFields.slice(0, -1));\r\n    }\r\n  };\r\n\r\n  const handleFieldNameChange = (id, value) => {\r\n    setFields((prevFields) =>\r\n      prevFields.map((field) => (field.id === id ? { ...field, name: value } : field))\r\n    );\r\n  };\r\n\r\n  const handleStartSpin = () => {\r\n    setResult(null);\r\n    setIsSpinning(true);\r\n\r\n    const totalDuration = 3000;\r\n    const start = Date.now();\r\n    const samples = 200;\r\n\r\n    const spinAnimation = () => {\r\n      const elapsed = Date.now() - start;\r\n      const progress = Math.min(elapsed / totalDuration, 1);\r\n      const easedProgress = 0.5 - 0.5 * Math.cos(progress * Math.PI);\r\n\r\n      const numCompleteTurns = Math.floor(Math.random() * 10); // Nombre aléatoire de tours complets (ajustez si nécessaire)\r\n      const randomRotation = Math.random() * 360; // Rotation aléatoire pour le positionnement final\r\n      const rotation = 1080 * easedProgress * numCompleteTurns + randomRotation;\r\n      setRotation(rotation);\r\n\r\n    };\r\n\r\n    const spinInterval = setInterval(spinAnimation, 16);\r\n\r\n    setTimeout(() => {\r\n      clearInterval(spinInterval);\r\n      setIsSpinning(false);\r\n\r\n      const wheelRect = wheelRef.current.getBoundingClientRect();\r\n      const triangleRect = triangleRef.current.getBoundingClientRect();\r\n\r\n      const triangleCenterX = triangleRect.left + triangleRect.width / 2;\r\n      const triangleCenterY = triangleRect.top + triangleRect.height / 2;\r\n\r\n      const wheelCenterX = wheelRect.left + wheelRect.width / 2;\r\n      const wheelCenterY = wheelRect.top + wheelRect.height / 2;\r\n\r\n      const angle = Math.atan2(triangleCenterY - wheelCenterY, triangleCenterX - wheelCenterX) * (180 / Math.PI);\r\n      const normalizedAngle = (angle + 360) % 360;\r\n\r\n      const sectionAngle = 360 / fields.length;\r\n      const selectedSectionIndex = Math.floor(normalizedAngle / sectionAngle);\r\n\r\n      setResult(selectedSectionIndex !== null ? selectedSectionIndex : 0);\r\n    }, totalDuration + 100);\r\n  };\r\n\r\n  const calculatePath = (index) => {\r\n    const totalFields = fields.length;\r\n    const angle = (360 / totalFields) * index;\r\n    const startAngle = angle;\r\n    const endAngle = angle + (360 / totalFields);\r\n\r\n    const radius = 50;\r\n\r\n    const startX = 50 + radius * Math.cos((startAngle * Math.PI) / 180);\r\n    const startY = 50 + radius * Math.sin((startAngle * Math.PI) / 180);\r\n    const endX = 50 + radius * Math.cos((endAngle * Math.PI) / 180);\r\n    const endY = 50 + radius * Math.sin((endAngle * Math.PI) / 180);\r\n\r\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\r\n    const color = fields[index].color;\r\n\r\n    const textX = 50 + radius * 0.8 * Math.cos(((startAngle + endAngle) / 2) * (Math.PI / 180));\r\n    const textY = 50 + radius * 0.8 * Math.sin(((startAngle + endAngle) / 2) * (Math.PI / 180));\r\n\r\n    return {\r\n      path: (\r\n        <path\r\n          key={index}\r\n          d={`M50 50 L${startX} ${startY} A${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY} Z`}\r\n          fill={color}\r\n          stroke=\"black\"\r\n          strokeWidth=\"1\"\r\n        />\r\n      ),\r\n      text: (\r\n        <text x={textX} y={textY} fontSize=\"5\" textAnchor=\"middle\" fill=\"black\">\r\n          {fields[index].name}\r\n        </text>\r\n      ),\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"wheel-container\">\r\n      <h2>Wheel Spinner</h2>\r\n      <div className=\"wheel\" ref={wheelRef}>\r\n        <svg viewBox=\"0 0 100 100\" width=\"200\" height=\"200\">\r\n          <g transform={`rotate(${rotation} 50 50)`}>\r\n            {fields.map((_, index) => {\r\n              const { path, text } = calculatePath(index);\r\n              const isHighlighted = !isSpinning && result !== null && index === result;\r\n\r\n              return (\r\n                <g\r\n                  key={index}\r\n                  className={isHighlighted ? 'highlighted-section selected-indicator' : 'selected-indicator'}\r\n                >\r\n                  {path}\r\n                  {text}\r\n                </g>\r\n              );\r\n            })}\r\n          </g>\r\n          <g ref={triangleRef}>\r\n            {triangle}\r\n          </g>\r\n        </svg>\r\n      </div>\r\n\r\n      <div className=\"fields-container\">\r\n        {fields.map((field) => (\r\n          <input\r\n            key={field.id}\r\n            type=\"text\"\r\n            placeholder={`Champ ${field.id}`}\r\n            value={field.name}\r\n            onChange={(e) => handleFieldNameChange(field.id, e.target.value)}\r\n          />\r\n        ))}\r\n      </div>\r\n      <button onClick={handleAddField}>Ajouter un champ</button>\r\n      <button onClick={handleRemoveField} disabled={fields.length < 2}>\r\n        Supprimer un champ\r\n      </button>\r\n      <button onClick={handleStartSpin} disabled={fields.length < 2 || isSpinning}>\r\n        Lancer la roue\r\n      </button>\r\n      {result !== null && <p>Résultat: {fields[result].name}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wheel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}