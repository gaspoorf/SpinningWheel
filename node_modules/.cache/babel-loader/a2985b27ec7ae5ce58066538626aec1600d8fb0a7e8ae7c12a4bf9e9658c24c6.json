{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaspa\\\\OneDrive\\\\Documents\\\\MMI 2\\\\S4\\\\React\\\\Spin-Wheel\\\\spin-wheel\\\\src\\\\components\\\\SpinWheel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './css/wheel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Roulette = () => {\n  _s();\n  const [segments, setSegments] = useState(['Better luck ', '10% off', '5% off']);\n  const [segColors, setSegColors] = useState(['black', '#60BA97', 'black']);\n  const [newSegment, setNewSegment] = useState('');\n  const [newSegColor, setNewSegColor] = useState('#000000');\n  const [rotation, setRotation] = useState(0);\n  const wheelRef = useRef(null);\n  useEffect(() => {\n    if (wheelRef.current) {\n      wheelRef.current.style.transition = 'transform 3s ease-out';\n      wheelRef.current.style.transform = `rotate(${rotation}deg)`;\n    }\n  }, [rotation]);\n  const handleAddSegment = () => {\n    if (newSegment.trim() !== '') {\n      setSegments(prevSegments => [...prevSegments, newSegment]);\n      setSegColors(prevSegColors => [...prevSegColors, newSegColor]);\n      setNewSegment('');\n      setNewSegColor('#000000');\n    }\n  };\n  const handleSegmentChange = (index, value) => {\n    const updatedSegments = [...segments];\n    updatedSegments[index] = value;\n    setSegments(updatedSegments);\n  };\n  const handleStartSpin = () => {\n    const randomRotation = 1080 + Math.floor(Math.random() * 1080);\n    setRotation(randomRotation);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"roulette-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Spinner wheel Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"roulette-wheel\",\n      ref: wheelRef,\n      children: segments.map((segment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field\",\n        style: {\n          backgroundColor: segColors[index],\n          clipPath: `polygon(50% 50%, 100% 0, 100% 100%)`,\n          transform: `rotate(${360 / segments.length * index}deg)`\n        },\n        children: segment\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"segment-input\",\n      children: [segments.map((segment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: `Segment ${index + 1}`,\n          value: segment,\n          onChange: e => handleSegmentChange(index, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          value: segColors[index],\n          onChange: e => setSegColors(prevSegColors => {\n            const updatedColors = [...prevSegColors];\n            updatedColors[index] = e.target.value;\n            return updatedColors;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Nouveau segment\",\n          value: newSegment,\n          onChange: e => setNewSegment(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          value: newSegColor,\n          onChange: e => setNewSegColor(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddSegment,\n          children: \"Ajouter un segment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartSpin,\n      disabled: segments.length < 2,\n      children: \"Lancer la roue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(Roulette, \"BfSvBL92iBSg9V3FzwwJBjod6b4=\");\n_c = Roulette;\nexport default Roulette;\nvar _c;\n$RefreshReg$(_c, \"Roulette\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Roulette","_s","segments","setSegments","segColors","setSegColors","newSegment","setNewSegment","newSegColor","setNewSegColor","rotation","setRotation","wheelRef","current","style","transition","transform","handleAddSegment","trim","prevSegments","prevSegColors","handleSegmentChange","index","value","updatedSegments","handleStartSpin","randomRotation","Math","floor","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","segment","backgroundColor","clipPath","length","type","placeholder","onChange","e","target","updatedColors","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/gaspa/OneDrive/Documents/MMI 2/S4/React/Spin-Wheel/spin-wheel/src/components/SpinWheel.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './css/wheel.css';\r\n\r\nconst Roulette = () => {\r\n  const [segments, setSegments] = useState(['Better luck ', '10% off', '5% off']);\r\n  const [segColors, setSegColors] = useState(['black', '#60BA97', 'black']);\r\n  const [newSegment, setNewSegment] = useState('');\r\n  const [newSegColor, setNewSegColor] = useState('#000000');\r\n  const [rotation, setRotation] = useState(0);\r\n  const wheelRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (wheelRef.current) {\r\n      wheelRef.current.style.transition = 'transform 3s ease-out';\r\n      wheelRef.current.style.transform = `rotate(${rotation}deg)`;\r\n    }\r\n  }, [rotation]);\r\n\r\n  const handleAddSegment = () => {\r\n    if (newSegment.trim() !== '') {\r\n      setSegments(prevSegments => [...prevSegments, newSegment]);\r\n      setSegColors(prevSegColors => [...prevSegColors, newSegColor]);\r\n      setNewSegment('');\r\n      setNewSegColor('#000000');\r\n    }\r\n  };\r\n\r\n  const handleSegmentChange = (index, value) => {\r\n    const updatedSegments = [...segments];\r\n    updatedSegments[index] = value;\r\n    setSegments(updatedSegments);\r\n  };\r\n\r\n  const handleStartSpin = () => {\r\n    const randomRotation = 1080 + Math.floor(Math.random() * 1080);\r\n    setRotation(randomRotation);\r\n  };\r\n\r\n  return (\r\n    <div className=\"roulette-container\">\r\n      <h1>Spinner wheel Demo</h1>\r\n      <div className=\"roulette-wheel\" ref={wheelRef}>\r\n        {segments.map((segment, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"field\"\r\n            style={{\r\n              backgroundColor: segColors[index],\r\n              clipPath: `polygon(50% 50%, 100% 0, 100% 100%)`,\r\n              transform: `rotate(${(360 / segments.length) * index}deg)`,\r\n            }}\r\n          >\r\n            {segment}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"segment-input\">\r\n        {segments.map((segment, index) => (\r\n          <div key={index}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder={`Segment ${index + 1}`}\r\n              value={segment}\r\n              onChange={(e) => handleSegmentChange(index, e.target.value)}\r\n            />\r\n            <input\r\n              type=\"color\"\r\n              value={segColors[index]}\r\n              onChange={(e) => setSegColors(prevSegColors => {\r\n                const updatedColors = [...prevSegColors];\r\n                updatedColors[index] = e.target.value;\r\n                return updatedColors;\r\n              })}\r\n            />\r\n          </div>\r\n        ))}\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Nouveau segment\"\r\n            value={newSegment}\r\n            onChange={(e) => setNewSegment(e.target.value)}\r\n          />\r\n          <input\r\n            type=\"color\"\r\n            value={newSegColor}\r\n            onChange={(e) => setNewSegColor(e.target.value)}\r\n          />\r\n          <button onClick={handleAddSegment}>Ajouter un segment</button>\r\n        </div>\r\n      </div>\r\n      <button onClick={handleStartSpin} disabled={segments.length < 2}>\r\n        Lancer la roue\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Roulette;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}